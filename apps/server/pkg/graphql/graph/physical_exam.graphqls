"""
Copyright 2021 Kidus Tiliksew

This file is part of Tensor EMR.

Tensor EMR is free software: you can redistribute it and/or modify
it under the terms of the version 2 of GNU General Public License as published by
the Free Software Foundation.

Tensor EMR is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""
type # ExamCategory
ExamCategory {
  id: ID!
  title: String!
  active: Boolean!
}

type ExamCategoryEdge {
  node: ExamCategory!
}

type ExamCategoryConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ExamCategoryEdge!]!
}

input ExamCategoryInput {
  title: String!
}

input ExamCategoryUpdateInput {
  id: ID!
  title: String
}

# ExamFinding
type ExamFinding {
  id: ID!
  title: String!
  pertinence: Boolean!
  examCategoryId: ID!
  examCategory: ExamCategory!
}

type ExamFindingEdge {
  node: ExamFinding!
}

type ExamFindingConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ExamFindingEdge!]!
}

input ExamFindingInput {
  title: String!
  pertinence: Boolean!
  examCategoryId: ID!
}

input ExamFindingUpdateInput {
  id: ID!
  title: String
  pertinence: Boolean
  examCategoryId: ID
}

# Physical Exam Finding
type PhysicalExamFinding {
  id: ID!
  patientChartId: ID!
  examCategoryId: ID!
  examCategory: ExamCategory!
  abnormal: Boolean!
  note: String
}

type PhysicalExamFindingEdge {
  node: PhysicalExamFinding!
}

type PhysicalExamFindingConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [PhysicalExamFindingEdge!]!
}

input PhysicalExamFindingInput {
  patientChartId: ID!
  examCategoryId: ID!
  abnormal: Boolean!
  note: String
}

input PhysicalExamFindingUpdateInput {
  id: ID!
  patientChartId: ID
  examCategoryId: ID
  abnormal: Boolean
  note: String
}

input PhysicalExamFindingFilter {
  patientChartId: ID
  examCategoryId: ID
}

extend type Query {
  examCategory(id: ID!): ExamCategory!
  examCategories(
    page: PaginationInput!
    searchTerm: String
  ): ExamCategoryConnection!

  examFinding(id: ID!): ExamFinding!
  examFindings(
    page: PaginationInput!
    searchTerm: String
  ): ExamFindingConnection!

  physicalExamFinding(id: ID!): PhysicalExamFinding!
  physicalExamFindings(
    page: PaginationInput!
    filter: PhysicalExamFindingFilter
  ): PhysicalExamFindingConnection!
}

extend type Mutation {
  saveExamCategory(input: ExamCategoryInput!): ExamCategory!
  updateExamCategory(input: ExamCategoryUpdateInput!): ExamCategory!

  saveExamFinding(input: ExamFindingInput!): ExamFinding!
  updateExamFinding(input: ExamFindingUpdateInput!): ExamFinding!

  savePhysicalExamFinding(
    input: PhysicalExamFindingInput!
  ): PhysicalExamFinding!
  updatePhysicalExamFinding(
    input: PhysicalExamFindingUpdateInput!
  ): PhysicalExamFinding!
  deletePhysicalExamFinding(id: ID!): Boolean!

  deletePhysicalExamFindingExamCategory(
    physicalExamFindingId: ID!
    examCategoryId: ID!
  ): PhysicalExamFinding!
}
