// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"context"
	"github.com/RediSearch/redisearch-go/redisearch"
	"github.com/jackc/pgx/v5"
	"github.com/ory/client-go"
	"github.com/tensorsystems/tensoremr/apps/core/internal/controller"
	"github.com/tensorsystems/tensoremr/apps/core/internal/fhir"
	"github.com/tensorsystems/tensoremr/apps/core/internal/repository"
	"github.com/tensorsystems/tensoremr/apps/core/internal/service"
	"net/http"
)

// Injectors from wire.go:

func InitFhirService(c http.Client, url string) fhir.FhirService {
	fhirService := fhir.NewFhirService(c, url)
	return fhirService
}

func InitActivityService(fhirService fhir.FhirService) service.ActivityDefinitionService {
	activityDefinitionRepository := repository.NewActivityDefinitionRepository(fhirService)
	activityDefinitionService := service.NewActivityDefinitionService(activityDefinitionRepository)
	return activityDefinitionService
}

func InitExtensionService(extensionUrl string) service.ExtensionService {
	extensionService := service.NewExtensionService(extensionUrl)
	return extensionService
}

func InitAppointmentService(fhirService fhir.FhirService, extensionService service.ExtensionService, userService service.UserService) service.AppointmentService {
	appointmentRepository := repository.NewAppointmentRepository(fhirService)
	encounterRepository := repository.NewEncounterRepository(fhirService)
	slotRepository := repository.NewSlotRepository(fhirService)
	organizationRepository := repository.NewOrganizationRepository(fhirService)
	appointmentService := service.NewAppointmentService(appointmentRepository, encounterRepository, slotRepository, organizationRepository, userService, extensionService)
	return appointmentService
}

func InitEncounterService(fhirService fhir.FhirService, careTeamService service.CareTeamService, patientService service.PatientService, activityDefinitionService service.ActivityDefinitionService, taskService service.TaskService, db *pgx.Conn) service.EncounterService {
	encounterRepository := repository.NewEncounterRepository(fhirService)
	encounterService := service.NewEncounterService(encounterRepository, careTeamService, patientService, activityDefinitionService, taskService, db)
	return encounterService
}

func InitOrganizationService(fhirService fhir.FhirService) service.OrganizationService {
	organizationRepository := repository.NewOrganizationRepository(fhirService)
	organizationService := service.NewOrganizationService(organizationRepository)
	return organizationService
}

func InitPatientService(fhirService fhir.FhirService, db *pgx.Conn) service.PatientService {
	patientRepository := repository.NewPatientRepository(fhirService)
	patientService := service.NewPatientService(patientRepository, db)
	return patientService
}

func InitSlotService(fhirService fhir.FhirService) service.SlotService {
	slotRepository := repository.NewSlotRepository(fhirService)
	slotService := service.NewSlotService(slotRepository)
	return slotService
}

func InitTaskService(fhirService fhir.FhirService) service.TaskService {
	taskRepository := repository.NewTaskRepository(fhirService)
	taskService := service.NewTaskService(taskRepository)
	return taskService
}

func InitPractitionerRepository(fhirService fhir.FhirService) repository.PractitionerRepository {
	practitionerRepository := repository.NewPractitionerRepository(fhirService)
	return practitionerRepository
}

func InitUserService(fhirService fhir.FhirService, oryClient *client.APIClient, context2 context.Context, schemaID string) service.UserService {
	userService := service.NewUserService(fhirService, oryClient, context2, schemaID)
	return userService
}

func InitCareTeamService(fhirService fhir.FhirService) service.CareTeamService {
	careTeamRepository := repository.NewCareTeamRepository(fhirService)
	careTeamService := service.NewCareTeamService(careTeamRepository)
	return careTeamService
}

func InitRxNormService(client2 http.Client, autoCompleter *redisearch.Autocompleter, rxNormURL string) service.RxNormService {
	rxNormRepository := repository.NewRxNormRepository(client2, autoCompleter, rxNormURL)
	rxNormService := service.NewRxNormService(rxNormRepository)
	return rxNormService
}

func InitLoincService(redisClient *redisearch.Client, loincConnect service.LouicConnect) service.LoincService {
	loincService := service.NewLoincService(redisClient, loincConnect)
	return loincService
}

func InitValueSetService(fhirService fhir.FhirService) service.ValueSetService {
	valueSetService := service.NewValueSetService(fhirService)
	return valueSetService
}

func InitSeedService(fhirService fhir.FhirService, userService service.UserService) service.SeedService {
	seedService := service.NewSeedService(userService)
	return seedService
}

func InitUserController(fhirService fhir.FhirService, userService service.UserService) controller.UserController {
	userController := controller.NewUserController(fhirService, userService)
	return userController
}

func InitPatientController(patientService service.PatientService) controller.PatientController {
	patientController := controller.NewPatientController(patientService)
	return patientController
}

func InitCodeSystemController(codeSystemService service.CodeSystemService) controller.CodeSystemController {
	codeSystemController := controller.NewCodeSystemController(codeSystemService)
	return codeSystemController
}

func InitAppointmentController(appointmentService service.AppointmentService) controller.AppointmentController {
	appointmentController := controller.NewAppointmentController(appointmentService)
	return appointmentController
}

func InitOrganizationController(organizationService service.OrganizationService) controller.OrganizationController {
	organizationController := controller.NewOrganizationController(organizationService)
	return organizationController
}

func InitEncounterController(encounterService service.EncounterService) controller.EncounterController {
	encounterController := controller.NewEncounterController(encounterService)
	return encounterController
}

func InitRxNormController(rxNormService service.RxNormService) controller.RxNormController {
	rxNormController := controller.NewRxNormController(rxNormService)
	return rxNormController
}

func InitLoincController(loincService service.LoincService) controller.LoincController {
	loincController := controller.NewLoincController(loincService)
	return loincController
}
