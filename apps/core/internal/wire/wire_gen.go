// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"context"
	"github.com/RediSearch/redisearch-go/redisearch"
	"github.com/jackc/pgx/v5"
	"github.com/tensorsystems/tensoremr/apps/core/internal/controller"
	"github.com/tensorsystems/tensoremr/apps/core/internal/repository"
	"github.com/tensorsystems/tensoremr/apps/core/pkg/service"
	"net/http"
)

// Injectors from wire.go:

func InitAuthService() service.AuthService {
	authService := service.NewAuthService()
	return authService
}

func InitRoleService() service.RoleService {
	roleService := service.NewRoleService()
	return roleService
}

func InitFhirService(config service.FHIRConfig) service.FHIRService {
	fhirService := service.NewFHIRService(config)
	return fhirService
}

func InitActivityService(fhirService service.FHIRService) service.ActivityDefinitionService {
	activityDefinitionService := service.NewActivityDefinitionService(fhirService)
	return activityDefinitionService
}

func InitExtensionService(extensionUrl string) service.ExtensionService {
	extensionService := service.NewExtensionService(extensionUrl)
	return extensionService
}

func InitAppointmentService(fhirService service.FHIRService, encounterService service.EncounterService, slotService service.SlotService, organizationService service.OrganizationService, extensionService service.ExtensionService, userService service.UserService) service.AppointmentService {
	appointmentService := service.NewAppointmentService(fhirService, encounterService, slotService, organizationService, userService, extensionService)
	return appointmentService
}

func InitEncounterService(fhirService service.FHIRService, careTeamService service.CareTeamService, patientService service.PatientService, activityDefinitionService service.ActivityDefinitionService, taskService service.TaskService, db *pgx.Conn) service.EncounterService {
	encounterService := service.NewEncounterService(fhirService, careTeamService, patientService, activityDefinitionService, taskService, db)
	return encounterService
}

func InitOrganizationService(fhirService service.FHIRService) service.OrganizationService {
	organizationService := service.NewOrganizationService(fhirService)
	return organizationService
}

func InitPatientService(fhirService service.FHIRService, db *pgx.Conn) service.PatientService {
	patientService := service.NewPatientService(fhirService, db)
	return patientService
}

func InitSlotService(fhirService service.FHIRService) service.SlotService {
	slotService := service.NewSlotService(fhirService)
	return slotService
}

func InitTaskService(fhirService service.FHIRService) service.TaskService {
	taskService := service.NewTaskService(fhirService)
	return taskService
}

func InitPractitionerService(fhirService service.FHIRService) service.PractitionerService {
	practitionerService := service.NewPractitionerService(fhirService)
	return practitionerService
}

func InitUserService(fhirService service.FHIRService, practitionerService service.PractitionerService, authService service.AuthService, roleService service.RoleService, context2 context.Context) service.UserService {
	userService := service.NewUserService(fhirService, practitionerService, authService, roleService, context2)
	return userService
}

func InitCareTeamService(fhirService service.FHIRService) service.CareTeamService {
	careTeamService := service.NewCareTeamService(fhirService)
	return careTeamService
}

func InitRxNormService(client http.Client, autoCompleter *redisearch.Autocompleter, rxNormURL string) service.RxNormService {
	rxNormRepository := repository.NewRxNormRepository(client, autoCompleter, rxNormURL)
	rxNormService := service.NewRxNormService(rxNormRepository)
	return rxNormService
}

func InitLoincService(redisClient *redisearch.Client, loincConnect service.LouicConnect) service.LoincService {
	loincService := service.NewLoincService(redisClient, loincConnect)
	return loincService
}

func InitValueSetService(fhirService service.FHIRService) service.ValueSetService {
	valueSetService := service.NewValueSetService(fhirService)
	return valueSetService
}

func InitSeedService(fhirService service.FHIRService, userService service.UserService, roleService service.RoleService) service.SeedService {
	seedService := service.NewSeedService(userService)
	return seedService
}

func InitUserController(fhirService service.FHIRService, userService service.UserService) controller.UserController {
	userController := controller.NewUserController(userService)
	return userController
}

func InitPatientController(patientService service.PatientService) controller.PatientController {
	patientController := controller.NewPatientController(patientService)
	return patientController
}

func InitCodeSystemController(codeSystemService service.CodeSystemService) controller.CodeSystemController {
	codeSystemController := controller.NewCodeSystemController(codeSystemService)
	return codeSystemController
}

func InitAppointmentController(appointmentService service.AppointmentService) controller.AppointmentController {
	appointmentController := controller.NewAppointmentController(appointmentService)
	return appointmentController
}

func InitOrganizationController(organizationService service.OrganizationService) controller.OrganizationController {
	organizationController := controller.NewOrganizationController(organizationService)
	return organizationController
}

func InitEncounterController(encounterService service.EncounterService) controller.EncounterController {
	encounterController := controller.NewEncounterController(encounterService)
	return encounterController
}

func InitRxNormController(rxNormService service.RxNormService) controller.RxNormController {
	rxNormController := controller.NewRxNormController(rxNormService)
	return rxNormController
}

func InitLoincController(loincService service.LoincService) controller.LoincController {
	loincController := controller.NewLoincController(loincService)
	return loincController
}
