// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph_models

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/tensorsystems/tensoremr/apps/go-core/pkg/models"
)

type Connection interface {
	IsConnection()
}

type Edge interface {
	IsEdge()
}

type AllergyConnection struct {
	TotalCount int            `json:"totalCount"`
	PageInfo   *PageInfo      `json:"pageInfo"`
	Edges      []*AllergyEdge `json:"edges"`
}

func (AllergyConnection) IsConnection() {}

type AllergyEdge struct {
	Node *models.Allergy `json:"node"`
}

type AllergyFilter struct {
	ID               *int `json:"id"`
	PatientHistoryID *int `json:"patientHistoryId"`
}

type AllergyInput struct {
	Title            string  `json:"title"`
	IssueSeverity    *string `json:"issueSeverity"`
	IssueReaction    *string `json:"issueReaction"`
	IssueOutcome     *string `json:"issueOutcome"`
	IssueOccurrence  *string `json:"issueOccurrence"`
	PatientHistoryID int     `json:"patientHistoryId"`
}

type AllergyUpdateInput struct {
	ID              int     `json:"id"`
	Title           *string `json:"title"`
	IssueSeverity   *string `json:"issueSeverity"`
	IssueReaction   *string `json:"issueReaction"`
	IssueOutcome    *string `json:"issueOutcome"`
	IssueOccurrence *string `json:"issueOccurrence"`
}

type AmendmentFilter struct {
	PatientChartID *int `json:"patientChartId"`
}

type AmendmentInput struct {
	PatientChartID int    `json:"patientChartId"`
	Note           string `json:"note"`
}

type AmendmentUpdateInput struct {
	ID   int     `json:"id"`
	Note *string `json:"note"`
}

type AppointmentConnection struct {
	TotalCount int                `json:"totalCount"`
	PageInfo   *PageInfo          `json:"pageInfo"`
	Edges      []*AppointmentEdge `json:"edges"`
}

func (AppointmentConnection) IsConnection() {}

type AppointmentEdge struct {
	Node *models.Appointment `json:"node"`
}

type AppointmentFilter struct {
	ID                  *int       `json:"id"`
	PatientID           *int       `json:"patientId"`
	CheckInTime         *time.Time `json:"checkInTime"`
	CheckedInTime       *time.Time `json:"checkedInTime"`
	CheckedOutTime      *time.Time `json:"checkedOutTime"`
	RoomID              *int       `json:"roomId"`
	VisitTypeID         *int       `json:"visitTypeId"`
	AppointmentStatusID *int       `json:"appointmentStatusId"`
	Credit              *bool      `json:"credit"`
	UserID              *int       `json:"userId"`
	PatientChartID      *int       `json:"patientChartId"`
}

type AppointmentInput struct {
	PatientID         int        `json:"patientId"`
	CheckInTime       time.Time  `json:"checkInTime"`
	CheckedInTime     *time.Time `json:"checkedInTime"`
	CheckedOutTime    *time.Time `json:"checkedOutTime"`
	RoomID            int        `json:"roomId"`
	VisitTypeID       int        `json:"visitTypeId"`
	Credit            *bool      `json:"credit"`
	Emergency         *bool      `json:"emergency"`
	MedicalDepartment *string    `json:"medicalDepartment"`
	PaymentIds        []*int     `json:"paymentIds"`
	FileIds           []*int     `json:"fileIds"`
	UserID            int        `json:"userId"`
	PatientChartID    *int       `json:"patientChartId"`
	InvoiceNo         *string    `json:"invoiceNo"`
	BillingID         *int       `json:"billingId"`
}

type AppointmentStatusConnection struct {
	TotalCount int                      `json:"totalCount"`
	PageInfo   *PageInfo                `json:"pageInfo"`
	Edges      []*AppointmentStatusEdge `json:"edges"`
}

func (AppointmentStatusConnection) IsConnection() {}

type AppointmentStatusEdge struct {
	Node *models.AppointmentStatus `json:"node"`
}

type AppointmentStatusInput struct {
	Title string `json:"title"`
}

type AppointmentUpdateInput struct {
	ID                  int        `json:"id"`
	PatientID           *int       `json:"patientId"`
	CheckInTime         *time.Time `json:"checkInTime"`
	CheckedInTime       *time.Time `json:"checkedInTime"`
	CheckedOutTime      *time.Time `json:"checkedOutTime"`
	RoomID              *int       `json:"roomId"`
	VisitTypeID         *int       `json:"visitTypeId"`
	AppointmentStatusID *int       `json:"appointmentStatusId"`
	Emergency           *bool      `json:"emergency"`
	MedicalDepartment   *string    `json:"medicalDepartment"`
	Credit              *bool      `json:"credit"`
	PaymentIds          []*int     `json:"paymentIds"`
	FileIds             []*int     `json:"fileIds"`
	UserID              *int       `json:"userId"`
	PatientChartID      *int       `json:"patientChartId"`
	ProviderName        *string    `json:"providerName"`
}

type BillingConnection struct {
	TotalCount int            `json:"totalCount"`
	PageInfo   *PageInfo      `json:"pageInfo"`
	Edges      []*BillingEdge `json:"edges"`
}

func (BillingConnection) IsConnection() {}

type BillingEdge struct {
	Node *models.Billing `json:"node"`
}

type BillingFilter struct {
	Item *string `json:"item"`
	Code *string `json:"code"`
}

type BillingInput struct {
	Item   string  `json:"item"`
	Code   string  `json:"code"`
	Price  float64 `json:"price"`
	Credit bool    `json:"credit"`
	Remark string  `json:"remark"`
}

type ChangePasswordInput struct {
	PreviousPassword string `json:"previousPassword"`
	Password         string `json:"password"`
	ConfirmPassword  string `json:"confirmPassword"`
}

type ChatInput struct {
	RecipientID int    `json:"recipientId"`
	Message     string `json:"message"`
}

type ChatMessageInput struct {
	Body   string `json:"body"`
	ChatID int    `json:"chatId"`
}

type ChiefComplaintConnection struct {
	TotalCount int                   `json:"totalCount"`
	PageInfo   *PageInfo             `json:"pageInfo"`
	Edges      []*ChiefComplaintEdge `json:"edges"`
}

func (ChiefComplaintConnection) IsConnection() {}

type ChiefComplaintEdge struct {
	Node *models.ChiefComplaint `json:"node"`
}

type ChiefComplaintFilter struct {
	ID             *int    `json:"id"`
	Title          *string `json:"title"`
	PatientChartID *int    `json:"patientChartId"`
}

type ChiefComplaintInput struct {
	Title           string `json:"title"`
	PatientChartID  int    `json:"patientChartId"`
	HpiComponentIds []*int `json:"hpiComponentIds"`
}

type ChiefComplaintOrder struct {
	Field     string         `json:"field"`
	Direction OrderDirection `json:"direction"`
}

type ChiefComplaintTypeConnection struct {
	TotalCount int                       `json:"totalCount"`
	PageInfo   *PageInfo                 `json:"pageInfo"`
	Edges      []*ChiefComplaintTypeEdge `json:"edges"`
}

func (ChiefComplaintTypeConnection) IsConnection() {}

type ChiefComplaintTypeEdge struct {
	Node *models.ChiefComplaintType `json:"node"`
}

type ChiefComplaintTypeInput struct {
	Title string `json:"title"`
}

type ChiefComplaintTypeUpdateInput struct {
	ID    int    `json:"id"`
	Title string `json:"title"`
}

type ChiefComplaintUpdateInput struct {
	ID              int     `json:"id"`
	Title           *string `json:"title"`
	PatientChartID  *int    `json:"patientChartId"`
	HpiComponentIds []*int  `json:"hpiComponentIds"`
}

// Copyright 2021 Kidus Tiliksew
//
// This file is part of Tensor EMR.
//
// Tensor EMR is free software: you can redistribute it and/or modify
// it under the terms of the version 2 of GNU General Public License as published by
// the Free Software Foundation.
//
// Tensor EMR is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
type Concept struct {
	Sctid              string `json:"sctid"`
	CaseSignificanceID string `json:"caseSignificanceId"`
	Nodetype           string `json:"nodetype"`
	AcceptabilityID    string `json:"acceptabilityId"`
	RefsetID           string `json:"refsetId"`
	LanguageCode       string `json:"languageCode"`
	DescriptionType    string `json:"descriptionType"`
	Term               string `json:"term"`
	TypeID             string `json:"typeId"`
	ModuleID           string `json:"moduleId"`
}

type ConceptAttributes struct {
	SubjectRelationshipContext *string `json:"subjectRelationshipContext"`
	FindingContext             *string `json:"findingContext"`
	TemporalContext            *string `json:"temporalContext"`
	AssociatedFinding          *string `json:"associatedFinding"`
}

type ConfirmFollowUpOrderInput struct {
	FollowUpOrderID int       `json:"followUpOrderId"`
	FollowUpID      int       `json:"followUpId"`
	BillingID       *int      `json:"billingId"`
	InvoiceNo       *string   `json:"invoiceNo"`
	CheckInTime     time.Time `json:"checkInTime"`
	RoomID          int       `json:"roomId"`
}

type ConfirmFollowUpOrderResult struct {
	FollowUpOrder *models.FollowUpOrder `json:"followUpOrder"`
	FollowUpID    int                   `json:"followUpId"`
	InvoiceNo     *string               `json:"invoiceNo"`
	BillingID     *int                  `json:"billingId"`
}

type ConfirmReferralOrderInput struct {
	ReferralOrderID int        `json:"referralOrderId"`
	ReferralID      int        `json:"referralId"`
	BillingID       *int       `json:"billingId"`
	InvoiceNo       *string    `json:"invoiceNo"`
	CheckInTime     *time.Time `json:"checkInTime"`
	RoomID          *int       `json:"roomId"`
}

type ConfirmReferralOrderResult struct {
	ReferralOrder *models.ReferralOrder `json:"referralOrder"`
	ReferralID    int                   `json:"referralId"`
	InvoiceNo     *string               `json:"invoiceNo"`
	BillingID     *int                  `json:"billingId"`
}

type ConfirmSurgicalOrderInput struct {
	SurgicalOrderID     int       `json:"surgicalOrderId"`
	SurgicalProcedureID int       `json:"surgicalProcedureId"`
	InvoiceNo           *string   `json:"invoiceNo"`
	CheckInTime         time.Time `json:"checkInTime"`
	RoomID              int       `json:"roomId"`
}

type ConfirmSurgicalOrderResult struct {
	SurgicalOrder       *models.SurgicalOrder `json:"surgicalOrder"`
	SurgicalProcedureID int                   `json:"surgicalProcedureId"`
	InvoiceNo           string                `json:"invoiceNo"`
}

type ConfirmTreatmentOrderInput struct {
	TreatmentOrderID int       `json:"treatmentOrderId"`
	TreatmentID      int       `json:"treatmentId"`
	InvoiceNo        *string   `json:"invoiceNo"`
	CheckInTime      time.Time `json:"checkInTime"`
	RoomID           int       `json:"roomId"`
}

type ConfirmTreatmentOrderResult struct {
	TreatmentOrder *models.TreatmentOrder `json:"treatmentOrder"`
	TreatmentID    int                    `json:"treatmentId"`
	InvoiceNo      string                 `json:"invoiceNo"`
}

type DateOfBirthInput struct {
	DateOfBirth *time.Time           `json:"dateOfBirth"`
	AgeInYears  *int                 `json:"ageInYears"`
	AgeInMonths *int                 `json:"ageInMonths"`
	InputType   DateOfBirthInputType `json:"inputType"`
}

type DiagnosisConnection struct {
	TotalCount int              `json:"totalCount"`
	PageInfo   *PageInfo        `json:"pageInfo"`
	Edges      []*DiagnosisEdge `json:"edges"`
}

func (DiagnosisConnection) IsConnection() {}

type DiagnosisEdge struct {
	Node *models.Diagnosis `json:"node"`
}

type DiagnosisInput struct {
	CategoryCode           *string `json:"categoryCode"`
	DiagnosisCode          *string `json:"diagnosisCode"`
	AbbreviatedDescription *string `json:"abbreviatedDescription"`
	FullDescription        string  `json:"fullDescription"`
	CategoryTitle          *string `json:"categoryTitle"`
}

type DiagnosisOrder struct {
	Field     string         `json:"field"`
	Direction OrderDirection `json:"direction"`
}

type DiagnosisUpdateInput struct {
	ID                     int     `json:"id"`
	CategoryCode           *string `json:"categoryCode"`
	DiagnosisCode          *string `json:"diagnosisCode"`
	AbbreviatedDescription *string `json:"abbreviatedDescription"`
	FullDescription        *string `json:"fullDescription"`
	CategoryTitle          *string `json:"categoryTitle"`
}

type DiagnosticProcedureConnection struct {
	TotalCount int                        `json:"totalCount"`
	PageInfo   *PageInfo                  `json:"pageInfo"`
	Edges      []*DiagnosticProcedureEdge `json:"edges"`
}

func (DiagnosticProcedureConnection) IsConnection() {}

type DiagnosticProcedureDeleteFileInput struct {
	DiagnosticProcedureID int `json:"diagnosticProcedureId"`
	FileID                int `json:"fileId"`
}

type DiagnosticProcedureEdge struct {
	Node *models.DiagnosticProcedure `json:"node"`
}

type DiagnosticProcedureFilter struct {
	PatientChartID *int `json:"patientChartId"`
}

type DiagnosticProcedureInput struct {
	PatientChartID              int     `json:"patientChartId"`
	DiagnosticProcedureOrderID  int     `json:"diagnosticProcedureOrderId"`
	GeneralText                 *string `json:"generalText"`
	ImageIds                    []*int  `json:"imageIds"`
	RightEyeImageIds            []*int  `json:"rightEyeImageIds"`
	LeftEyeImageIds             []*int  `json:"leftEyeImageIds"`
	RightEyeSketcheIds          []*int  `json:"rightEyeSketcheIds"`
	LeftEyeSketcheIds           []*int  `json:"leftEyeSketcheIds"`
	DocumentIds                 []*int  `json:"documentIds"`
	RightDistanceSubjectiveSph  *string `json:"rightDistanceSubjectiveSph"`
	LeftDistanceSubjectiveSph   *string `json:"leftDistanceSubjectiveSph"`
	RightDistanceSubjectiveCyl  *string `json:"rightDistanceSubjectiveCyl"`
	LeftDistanceSubjectiveCyl   *string `json:"leftDistanceSubjectiveCyl"`
	RightDistanceSubjectiveAxis *string `json:"rightDistanceSubjectiveAxis"`
	LeftDistanceSubjectiveAxis  *string `json:"leftDistanceSubjectiveAxis"`
	RightNearSubjectiveSph      *string `json:"rightNearSubjectiveSph"`
	LeftNearSubjectiveSph       *string `json:"leftNearSubjectiveSph"`
	RightNearSubjectiveCyl      *string `json:"rightNearSubjectiveCyl"`
	LeftNearSubjectiveCyl       *string `json:"leftNearSubjectiveCyl"`
	RightNearSubjectiveAxis     *string `json:"rightNearSubjectiveAxis"`
	LeftNearSubjectiveAxis      *string `json:"leftNearSubjectiveAxis"`
	RightDistanceObjectiveSph   *string `json:"rightDistanceObjectiveSph"`
	LeftDistanceObjectiveSph    *string `json:"leftDistanceObjectiveSph"`
	RightDistanceObjectiveCyl   *string `json:"rightDistanceObjectiveCyl"`
	LeftDistanceObjectiveCyl    *string `json:"leftDistanceObjectiveCyl"`
	RightDistanceObjectiveAxis  *string `json:"rightDistanceObjectiveAxis"`
	LeftDistanceObjectiveAxis   *string `json:"leftDistanceObjectiveAxis"`
	RightNearObjectiveSph       *string `json:"rightNearObjectiveSph"`
	LeftNearObjectiveSph        *string `json:"leftNearObjectiveSph"`
	RightNearObjectiveCyl       *string `json:"rightNearObjectiveCyl"`
	LeftNearObjectiveCyl        *string `json:"leftNearObjectiveCyl"`
	RightNearObjectiveAxis      *string `json:"rightNearObjectiveAxis"`
	LeftNearObjectiveAxis       *string `json:"leftNearObjectiveAxis"`
	RightDistanceFinalSph       *string `json:"rightDistanceFinalSph"`
	LeftDistanceFinalSph        *string `json:"leftDistanceFinalSph"`
	RightDistanceFinalCyl       *string `json:"rightDistanceFinalCyl"`
	LeftDistanceFinalCyl        *string `json:"leftDistanceFinalCyl"`
	RightDistanceFinalAxis      *string `json:"rightDistanceFinalAxis"`
	LeftDistanceFinalAxis       *string `json:"leftDistanceFinalAxis"`
	RightNearFinalSph           *string `json:"rightNearFinalSph"`
	LeftNearFinalSph            *string `json:"leftNearFinalSph"`
	RightNearFinalCyl           *string `json:"rightNearFinalCyl"`
	LeftNearFinalCyl            *string `json:"leftNearFinalCyl"`
	RightNearFinalAxis          *string `json:"rightNearFinalAxis"`
	LeftNearFinalAxis           *string `json:"leftNearFinalAxis"`
	RightVisualAcuity           *string `json:"rightVisualAcuity"`
	LeftVisualAcuity            *string `json:"leftVisualAcuity"`
	FarPd                       *string `json:"farPd"`
	NearPd                      *string `json:"nearPd"`
	OrderID                     int     `json:"orderId"`
}

type DiagnosticProcedureOrderConnection struct {
	TotalCount int                             `json:"totalCount"`
	PageInfo   *PageInfo                       `json:"pageInfo"`
	Edges      []*DiagnosticProcedureOrderEdge `json:"edges"`
}

func (DiagnosticProcedureOrderConnection) IsConnection() {}

type DiagnosticProcedureOrderEdge struct {
	Node *models.DiagnosticProcedureOrder `json:"node"`
}

type DiagnosticProcedureOrderFilter struct {
	PatientChartID *int    `json:"patientChartId"`
	OrderedByID    *int    `json:"orderedById"`
	PatientID      *int    `json:"patientId"`
	Status         *string `json:"status"`
}

type DiagnosticProcedureOrderUpdateInput struct {
	ID             int                                    `json:"id"`
	PatientChartID *int                                   `json:"patientChartId"`
	PatientID      *int                                   `json:"patientId"`
	FirstName      *string                                `json:"firstName"`
	LastName       *string                                `json:"lastName"`
	PhoneNo        *string                                `json:"phoneNo"`
	UserName       *string                                `json:"userName"`
	OrderedByID    *int                                   `json:"orderedById"`
	Status         *models.DiagnosticProcedureOrderStatus `json:"status"`
	OrderNote      *string                                `json:"orderNote"`
	ReceptionNote  *string                                `json:"receptionNote"`
}

type DiagnosticProcedureTypeConnection struct {
	TotalCount int                            `json:"totalCount"`
	PageInfo   *PageInfo                      `json:"pageInfo"`
	Edges      []*DiagnosticProcedureTypeEdge `json:"edges"`
}

func (DiagnosticProcedureTypeConnection) IsConnection() {}

type DiagnosticProcedureTypeEdge struct {
	Node *models.DiagnosticProcedureType `json:"node"`
}

type DiagnosticProcedureTypeInput struct {
	Title      string `json:"title"`
	Active     bool   `json:"active"`
	BillingIds []*int `json:"billingIds"`
}

type DiagnosticProcedureTypeUpdateInput struct {
	ID         int     `json:"id"`
	Title      *string `json:"title"`
	Active     bool    `json:"active"`
	BillingIds []*int  `json:"billingIds"`
}

type DiagnosticProcedureUpdateInput struct {
	ID                          int                               `json:"id"`
	GeneralText                 *string                           `json:"generalText"`
	Images                      []*FileUpload                     `json:"images"`
	Documents                   []*FileUpload                     `json:"documents"`
	RightDistanceSubjectiveSph  *string                           `json:"rightDistanceSubjectiveSph"`
	LeftDistanceSubjectiveSph   *string                           `json:"leftDistanceSubjectiveSph"`
	RightDistanceSubjectiveCyl  *string                           `json:"rightDistanceSubjectiveCyl"`
	LeftDistanceSubjectiveCyl   *string                           `json:"leftDistanceSubjectiveCyl"`
	RightDistanceSubjectiveAxis *string                           `json:"rightDistanceSubjectiveAxis"`
	LeftDistanceSubjectiveAxis  *string                           `json:"leftDistanceSubjectiveAxis"`
	RightNearSubjectiveSph      *string                           `json:"rightNearSubjectiveSph"`
	LeftNearSubjectiveSph       *string                           `json:"leftNearSubjectiveSph"`
	RightNearSubjectiveCyl      *string                           `json:"rightNearSubjectiveCyl"`
	LeftNearSubjectiveCyl       *string                           `json:"leftNearSubjectiveCyl"`
	RightNearSubjectiveAxis     *string                           `json:"rightNearSubjectiveAxis"`
	LeftNearSubjectiveAxis      *string                           `json:"leftNearSubjectiveAxis"`
	RightDistanceObjectiveSph   *string                           `json:"rightDistanceObjectiveSph"`
	LeftDistanceObjectiveSph    *string                           `json:"leftDistanceObjectiveSph"`
	RightDistanceObjectiveCyl   *string                           `json:"rightDistanceObjectiveCyl"`
	LeftDistanceObjectiveCyl    *string                           `json:"leftDistanceObjectiveCyl"`
	RightDistanceObjectiveAxis  *string                           `json:"rightDistanceObjectiveAxis"`
	LeftDistanceObjectiveAxis   *string                           `json:"leftDistanceObjectiveAxis"`
	RightNearObjectiveSph       *string                           `json:"rightNearObjectiveSph"`
	LeftNearObjectiveSph        *string                           `json:"leftNearObjectiveSph"`
	RightNearObjectiveCyl       *string                           `json:"rightNearObjectiveCyl"`
	LeftNearObjectiveCyl        *string                           `json:"leftNearObjectiveCyl"`
	RightNearObjectiveAxis      *string                           `json:"rightNearObjectiveAxis"`
	LeftNearObjectiveAxis       *string                           `json:"leftNearObjectiveAxis"`
	RightDistanceFinalSph       *string                           `json:"rightDistanceFinalSph"`
	LeftDistanceFinalSph        *string                           `json:"leftDistanceFinalSph"`
	RightDistanceFinalCyl       *string                           `json:"rightDistanceFinalCyl"`
	LeftDistanceFinalCyl        *string                           `json:"leftDistanceFinalCyl"`
	RightDistanceFinalAxis      *string                           `json:"rightDistanceFinalAxis"`
	LeftDistanceFinalAxis       *string                           `json:"leftDistanceFinalAxis"`
	RightNearFinalSph           *string                           `json:"rightNearFinalSph"`
	LeftNearFinalSph            *string                           `json:"leftNearFinalSph"`
	RightNearFinalCyl           *string                           `json:"rightNearFinalCyl"`
	LeftNearFinalCyl            *string                           `json:"leftNearFinalCyl"`
	RightNearFinalAxis          *string                           `json:"rightNearFinalAxis"`
	LeftNearFinalAxis           *string                           `json:"leftNearFinalAxis"`
	RightVisualAcuity           *string                           `json:"rightVisualAcuity"`
	LeftVisualAcuity            *string                           `json:"leftVisualAcuity"`
	FarPd                       *string                           `json:"farPd"`
	NearPd                      *string                           `json:"nearPd"`
	Status                      *models.DiagnosticProcedureStatus `json:"status"`
}

type ExamCategoryConnection struct {
	TotalCount int                 `json:"totalCount"`
	PageInfo   *PageInfo           `json:"pageInfo"`
	Edges      []*ExamCategoryEdge `json:"edges"`
}

func (ExamCategoryConnection) IsConnection() {}

type ExamCategoryEdge struct {
	Node *models.ExamCategory `json:"node"`
}

type ExamCategoryInput struct {
	Title string `json:"title"`
}

type ExamCategoryUpdateInput struct {
	ID    int     `json:"id"`
	Title *string `json:"title"`
}

type ExamFindingConnection struct {
	TotalCount int                `json:"totalCount"`
	PageInfo   *PageInfo          `json:"pageInfo"`
	Edges      []*ExamFindingEdge `json:"edges"`
}

func (ExamFindingConnection) IsConnection() {}

type ExamFindingEdge struct {
	Node *models.ExamFinding `json:"node"`
}

type ExamFindingInput struct {
	Title          string `json:"title"`
	Pertinence     bool   `json:"pertinence"`
	ExamCategoryID int    `json:"examCategoryId"`
}

type ExamFindingUpdateInput struct {
	ID             int     `json:"id"`
	Title          *string `json:"title"`
	Pertinence     *bool   `json:"pertinence"`
	ExamCategoryID *int    `json:"examCategoryId"`
}

type EyewearPrescriptionConnection struct {
	TotalCount int                        `json:"totalCount"`
	PageInfo   *PageInfo                  `json:"pageInfo"`
	Edges      []*EyewearPrescriptionEdge `json:"edges"`
}

func (EyewearPrescriptionConnection) IsConnection() {}

type EyewearPrescriptionEdge struct {
	Node *models.EyewearPrescription `json:"node"`
}

type EyewearPrescriptionFilter struct {
	ID             *int    `json:"id"`
	PatientChartID *int    `json:"patientChartId"`
	Status         *string `json:"status"`
	History        *bool   `json:"history"`
}

type EyewearPrescriptionInput struct {
	PatientChartID     int        `json:"patientChartId"`
	PatientID          int        `json:"patientId"`
	Glass              *bool      `json:"glass"`
	Plastic            *bool      `json:"plastic"`
	SingleVision       *bool      `json:"singleVision"`
	PhotoChromatic     *bool      `json:"photoChromatic"`
	GlareFree          *bool      `json:"glareFree"`
	ScratchResistant   *bool      `json:"scratchResistant"`
	Bifocal            *bool      `json:"bifocal"`
	Progressive        *bool      `json:"progressive"`
	TwoSeparateGlasses *bool      `json:"twoSeparateGlasses"`
	HighIndex          *bool      `json:"highIndex"`
	Tint               *bool      `json:"tint"`
	BlueCut            *bool      `json:"blueCut"`
	PrescribedDate     *time.Time `json:"prescribedDate"`
	History            bool       `json:"history"`
	EyewearShopID      int        `json:"eyewearShopId"`
	Status             *string    `json:"status"`
}

type EyewearPrescriptionOrderConnection struct {
	TotalCount int                             `json:"totalCount"`
	PageInfo   *PageInfo                       `json:"pageInfo"`
	Edges      []*EyewearPrescriptionOrderEdge `json:"edges"`
}

func (EyewearPrescriptionOrderConnection) IsConnection() {}

type EyewearPrescriptionOrderEdge struct {
	Node *models.EyewearPrescriptionOrder `json:"node"`
}

type EyewearPrescriptionOrderUpdateInput struct {
	ID         int     `json:"id"`
	PharmacyID *int    `json:"pharmacyId"`
	Status     *string `json:"status"`
}

type EyewearPrescriptionUpdateInput struct {
	ID                 int        `json:"id"`
	Glass              *bool      `json:"glass"`
	Plastic            *bool      `json:"plastic"`
	SingleVision       *bool      `json:"singleVision"`
	PhotoChromatic     *bool      `json:"photoChromatic"`
	GlareFree          *bool      `json:"glareFree"`
	ScratchResistant   *bool      `json:"scratchResistant"`
	Bifocal            *bool      `json:"bifocal"`
	Progressive        *bool      `json:"progressive"`
	TwoSeparateGlasses *bool      `json:"twoSeparateGlasses"`
	HighIndex          *bool      `json:"highIndex"`
	Tint               *bool      `json:"tint"`
	BlueCut            *bool      `json:"blueCut"`
	PrescribedDate     *time.Time `json:"prescribedDate"`
	History            *bool      `json:"history"`
	Status             *string    `json:"status"`
}

type EyewearShopConnection struct {
	TotalCount int                `json:"totalCount"`
	PageInfo   *PageInfo          `json:"pageInfo"`
	Edges      []*EyewearShopEdge `json:"edges"`
}

func (EyewearShopConnection) IsConnection() {}

type EyewearShopEdge struct {
	Node *models.EyewearShop `json:"node"`
}

type EyewearShopInput struct {
	Title   string `json:"title"`
	Address string `json:"address"`
	Region  string `json:"region"`
	Country string `json:"country"`
	Phone   string `json:"phone"`
	InHouse bool   `json:"inHouse"`
	Active  bool   `json:"active"`
}

type EyewearShopUpdateInput struct {
	ID      int     `json:"id"`
	Title   *string `json:"title"`
	Address *string `json:"address"`
	Region  *string `json:"region"`
	Country *string `json:"country"`
	Phone   *string `json:"phone"`
	InHouse *bool   `json:"inHouse"`
	Active  *bool   `json:"active"`
}

type FamilyIllnessInput struct {
	Title            string `json:"title"`
	Description      string `json:"description"`
	PatientHistoryID int    `json:"patientHistoryId"`
}

type FamilyIllnessUpdateInput struct {
	ID          int     `json:"id"`
	Description *string `json:"description"`
	Title       *string `json:"title"`
}

type FavoriteMedicationConnection struct {
	TotalCount int                       `json:"totalCount"`
	PageInfo   *PageInfo                 `json:"pageInfo"`
	Edges      []*FavoriteMedicationEdge `json:"edges"`
}

func (FavoriteMedicationConnection) IsConnection() {}

type FavoriteMedicationEdge struct {
	Node *models.FavoriteMedication `json:"node"`
}

type FavoriteMedicationFilter struct {
	ID         *int    `json:"id"`
	Medication *string `json:"medication"`
	UserID     *int    `json:"userId"`
}

type FavoriteMedicationInput struct {
	Medication          *string `json:"medication"`
	Sig                 *string `json:"sig"`
	Refill              *int    `json:"refill"`
	RxCui               *string `json:"rxCui"`
	Synonym             *string `json:"synonym"`
	Tty                 *string `json:"tty"`
	Language            *string `json:"language"`
	Generic             *bool   `json:"generic"`
	SubstitutionAllowed *bool   `json:"substitutionAllowed"`
	DirectionToPatient  *string `json:"directionToPatient"`
}

type FavoriteMedicationUpdateInput struct {
	ID                  int     `json:"id"`
	Medication          *string `json:"medication"`
	Sig                 *string `json:"sig"`
	Refill              *int    `json:"refill"`
	RxCui               *string `json:"rxCui"`
	Synonym             *string `json:"synonym"`
	Tty                 *string `json:"tty"`
	Language            *string `json:"language"`
	Generic             *bool   `json:"generic"`
	SubstitutionAllowed *bool   `json:"substitutionAllowed"`
	DirectionToPatient  *string `json:"directionToPatient"`
}

type FileConnection struct {
	TotalCount int         `json:"totalCount"`
	PageInfo   *PageInfo   `json:"pageInfo"`
	Edges      []*FileEdge `json:"edges"`
}

func (FileConnection) IsConnection() {}

type FileEdge struct {
	Node *models.File `json:"node"`
}

type FileInput struct {
	ContentType string `json:"contentType"`
	FileName    string `json:"fileName"`
	Size        int    `json:"size"`
}

type FileUpdateInput struct {
	ID       int    `json:"id"`
	FileName string `json:"fileName"`
}

type FileUpload struct {
	File graphql.Upload `json:"file"`
	Name string         `json:"name"`
}

type FollowUpConnection struct {
	TotalCount int             `json:"totalCount"`
	PageInfo   *PageInfo       `json:"pageInfo"`
	Edges      []*FollowUpEdge `json:"edges"`
}

func (FollowUpConnection) IsConnection() {}

type FollowUpEdge struct {
	Node *models.FollowUp `json:"node"`
}

type FollowUpFilter struct {
	PatientChartID *int `json:"patientChartId"`
}

type FollowUpInput struct {
	FollowUpOrderID int                   `json:"followUpOrderId"`
	PatientChartID  int                   `json:"patientChartId"`
	Status          models.FollowUpStatus `json:"status"`
}

type FollowUpOrderConnection struct {
	TotalCount int                  `json:"totalCount"`
	PageInfo   *PageInfo            `json:"pageInfo"`
	Edges      []*FollowUpOrderEdge `json:"edges"`
}

func (FollowUpOrderConnection) IsConnection() {}

type FollowUpOrderEdge struct {
	Node *models.FollowUpOrder `json:"node"`
}

type FollowUpOrderFilter struct {
	PatientChartID *int    `json:"patientChartId"`
	OrderedByID    *int    `json:"orderedById"`
	PatientID      *int    `json:"patientId"`
	Status         *string `json:"status"`
}

type FollowUpUpdateInput struct {
	ID     int                    `json:"id"`
	Status *models.FollowUpStatus `json:"status"`
}

type HealthCheckReport struct {
	Health string `json:"health"`
	Db     bool   `json:"db"`
}

type HomeStats struct {
	Scheduled  int `json:"scheduled"`
	CheckedIn  int `json:"checkedIn"`
	CheckedOut int `json:"checkedOut"`
}

type HpiComponentConnection struct {
	TotalCount int                 `json:"totalCount"`
	PageInfo   *PageInfo           `json:"pageInfo"`
	Edges      []*HpiComponentEdge `json:"edges"`
}

func (HpiComponentConnection) IsConnection() {}

type HpiComponentEdge struct {
	Node *models.HpiComponent `json:"node"`
}

type HpiComponentInput struct {
	Title              string `json:"title"`
	HpiComponentTypeID int    `json:"hpiComponentTypeId"`
}

type HpiComponentTypeConnection struct {
	TotalCount int                     `json:"totalCount"`
	PageInfo   *PageInfo               `json:"pageInfo"`
	Edges      []*HpiComponentTypeEdge `json:"edges"`
}

func (HpiComponentTypeConnection) IsConnection() {}

type HpiComponentTypeEdge struct {
	Node *models.HpiComponentType `json:"node"`
}

type HpiComponentTypeInput struct {
	Title       string `json:"title"`
	Description string `json:"description"`
}

type HpiComponentTypeOrder struct {
	Field     string         `json:"field"`
	Direction OrderDirection `json:"direction"`
}

type HpiComponentTypeUpdateInput struct {
	ID          int    `json:"id"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

type HpiComponentUpdateInput struct {
	ID                 int     `json:"id"`
	Title              *string `json:"title"`
	HpiComponentTypeID *int    `json:"hpiComponentTypeId"`
}

type HpiFilter struct {
	ID                 *int    `json:"id"`
	Title              *string `json:"title"`
	HpiComponentTypeID *int    `json:"hpiComponentTypeId"`
}

type LabConnection struct {
	TotalCount int        `json:"totalCount"`
	PageInfo   *PageInfo  `json:"pageInfo"`
	Edges      []*LabEdge `json:"edges"`
}

func (LabConnection) IsConnection() {}

type LabDeleteFileInput struct {
	LabID  int `json:"labId"`
	FileID int `json:"fileId"`
}

type LabEdge struct {
	Node *models.Lab `json:"node"`
}

type LabFilter struct {
	PatientChartID *int `json:"patientChartId"`
}

type LabInput struct {
	PatientChartID                     int        `json:"patientChartId"`
	LabOrderID                         int        `json:"labOrderId"`
	CbcWbcActive                       *bool      `json:"cbcWbcActive"`
	CbcWbcResults                      *string    `json:"cbcWbcResults"`
	CbcWbcDate                         *time.Time `json:"cbcWbcDate"`
	CbcHgbActive                       *bool      `json:"cbcHgbActive"`
	CbcHgbResults                      *string    `json:"cbcHgbResults"`
	CbcHgbDate                         *time.Time `json:"cbcHgbDate"`
	CbcHctActive                       *bool      `json:"cbcHctActive"`
	CbcHctResults                      *string    `json:"cbcHctResults"`
	CbcHctDate                         *time.Time `json:"cbcHctDate"`
	CbcEsrActive                       *bool      `json:"cbcEsrActive"`
	CbcEsrResults                      *string    `json:"cbcEsrResults"`
	CbcEsrDate                         *time.Time `json:"cbcEsrDate"`
	CbcBloodGroupActive                *bool      `json:"cbcBloodGroupActive"`
	CbcBloodGroupResults               *string    `json:"cbcBloodGroupResults"`
	CbcBloodGroupDate                  *time.Time `json:"cbcBloodGroupDate"`
	CbcRhActive                        *bool      `json:"cbcRhActive"`
	CbcRhResults                       *string    `json:"cbcRhResults"`
	CbcRhDate                          *time.Time `json:"cbcRhDate"`
	CbcBloodFilmActive                 *bool      `json:"cbcBloodFilmActive"`
	CbcBloodFilmResults                *string    `json:"cbcBloodFilmResults"`
	CbcBloodFilmDate                   *time.Time `json:"cbcBloodFilmDate"`
	CbcPltActive                       *bool      `json:"cbcPltActive"`
	CbcPltResults                      *string    `json:"cbcPltResults"`
	CbcPltDate                         *time.Time `json:"cbcPltDate"`
	LiverCoagulationPtActive           *bool      `json:"liverCoagulationPtActive"`
	LiverCoagulationPtResults          *string    `json:"liverCoagulationPtResults"`
	LiverCoagulationPtDate             *time.Time `json:"liverCoagulationPtDate"`
	LiverCoagulationPttActive          *bool      `json:"liverCoagulationPttActive"`
	LiverCoagulationPttResults         *string    `json:"liverCoagulationPttResults"`
	LiverCoagulationPttDate            *time.Time `json:"liverCoagulationPttDate"`
	LiverCoagulationInrActive          *bool      `json:"liverCoagulationInrActive"`
	LiverCoagulationInrResults         *string    `json:"liverCoagulationInrResults"`
	LiverCoagulationInrDate            *time.Time `json:"liverCoagulationInrDate"`
	LiverAstsgotActive                 *bool      `json:"liverAstsgotActive"`
	LiverAstsgotResults                *string    `json:"liverAstsgotResults"`
	LiverAstsgotDate                   *time.Time `json:"liverAstsgotDate"`
	LiverAltsgptActive                 *bool      `json:"liverAltsgptActive"`
	LiverAltsgptResults                *string    `json:"liverAltsgptResults"`
	LiverAltsgptDate                   *time.Time `json:"liverAltsgptDate"`
	LiverAlpActive                     *bool      `json:"liverAlpActive"`
	LiverAlpResults                    *string    `json:"liverAlpResults"`
	LiverAlpDate                       *time.Time `json:"liverAlpDate"`
	RenalCrActive                      *bool      `json:"renalCrActive"`
	RenalCrResults                     *string    `json:"renalCrResults"`
	RenalCrDate                        *time.Time `json:"renalCrDate"`
	RenalBunActive                     *bool      `json:"renalBunActive"`
	RenalBunResults                    *string    `json:"renalBunResults"`
	RenalBunDate                       *time.Time `json:"renalBunDate"`
	ThyroidFreeT3Active                *bool      `json:"thyroidFreeT3Active"`
	ThyroidFreeT3Results               *string    `json:"thyroidFreeT3Results"`
	ThyroidFreeT3Date                  *time.Time `json:"thyroidFreeT3Date"`
	ThyroidTotalT4Active               *bool      `json:"thyroidTotalT4Active"`
	ThyroidTotalT4Results              *string    `json:"thyroidTotalT4Results"`
	ThyroidTotalT4Date                 *time.Time `json:"thyroidTotalT4Date"`
	ThyroidTshActive                   *bool      `json:"thyroidTshActive"`
	ThyroidTshResults                  *string    `json:"thyroidTshResults"`
	ThyroidTshDate                     *time.Time `json:"thyroidTshDate"`
	ElectrolytesNaPlusActive           *bool      `json:"electrolytesNaPlusActive"`
	ElectrolytesNaPlusResults          *string    `json:"electrolytesNaPlusResults"`
	ElectrolytesNaPlusDate             *time.Time `json:"electrolytesNaPlusDate"`
	ElectrolytesKPlusActive            *bool      `json:"electrolytesKPlusActive"`
	ElectrolytesKPlusResults           *string    `json:"electrolytesKPlusResults"`
	ElectrolytesKPlusDate              *time.Time `json:"electrolytesKPlusDate"`
	ElectrolytesClMinusActive          *bool      `json:"electrolytesClMinusActive"`
	ElectrolytesClMinusResults         *string    `json:"electrolytesClMinusResults"`
	ElectrolytesClMinusDate            *time.Time `json:"electrolytesClMinusDate"`
	ElectrolytesCa2PlusActive          *bool      `json:"electrolytesCa2PlusActive"`
	ElectrolytesCa2PlusResults         *string    `json:"electrolytesCa2PlusResults"`
	ElectrolytesCa2PlusDate            *time.Time `json:"electrolytesCa2PlusDate"`
	ElectrolytesMg2PlusActive          *bool      `json:"electrolytesMg2PlusActive"`
	ElectrolytesMg2PlusResults         *string    `json:"electrolytesMg2PlusResults"`
	ElectrolytesMg2PlusDate            *time.Time `json:"electrolytesMg2PlusDate"`
	ElectrolytesPMinusActive           *bool      `json:"electrolytesPMinusActive"`
	ElectrolytesPMinusResults          *string    `json:"electrolytesPMinusResults"`
	ElectrolytesPMinusDate             *time.Time `json:"electrolytesPMinusDate"`
	StoolConsistencyActive             *bool      `json:"stoolConsistencyActive"`
	StoolConsistencyResults            *string    `json:"stoolConsistencyResults"`
	StoolConsistencyDate               *time.Time `json:"stoolConsistencyDate"`
	StoolOpActive                      *bool      `json:"stoolOpActive"`
	StoolOpResults                     *string    `json:"stoolOpResults"`
	StoolOpDate                        *time.Time `json:"stoolOpDate"`
	StoolConcentrationActive           *bool      `json:"stoolConcentrationActive"`
	StoolConcentrationResults          *string    `json:"stoolConcentrationResults"`
	StoolConcentrationDate             *time.Time `json:"stoolConcentrationDate"`
	StoolOccultBloodActive             *bool      `json:"stoolOccultBloodActive"`
	StoolOccultBloodResults            *string    `json:"stoolOccultBloodResults"`
	StoolOccultBloodDate               *time.Time `json:"stoolOccultBloodDate"`
	MicroscopyEpitCellsActive          *bool      `json:"microscopyEpitCellsActive"`
	MicroscopyEpitCellsResults         *string    `json:"microscopyEpitCellsResults"`
	MicroscopyEpitCellsDate            *time.Time `json:"microscopyEpitCellsDate"`
	MicroscopyWbcActive                *bool      `json:"microscopyWbcActive"`
	MicroscopyWbcResults               *string    `json:"microscopyWbcResults"`
	MicroscopyWbcDate                  *time.Time `json:"microscopyWbcDate"`
	MicroscopyRbcActive                *bool      `json:"microscopyRbcActive"`
	MicroscopyRbcResults               *string    `json:"microscopyRbcResults"`
	MicroscopyRbcDate                  *time.Time `json:"microscopyRbcDate"`
	MicroscopyCastsActive              *bool      `json:"microscopyCastsActive"`
	MicroscopyCastsResults             *string    `json:"microscopyCastsResults"`
	MicroscopyCastsDate                *time.Time `json:"microscopyCastsDate"`
	MicroscopyCrystalsActive           *bool      `json:"microscopyCrystalsActive"`
	MicroscopyCrystalsResults          *string    `json:"microscopyCrystalsResults"`
	MicroscopyCrystalsDate             *time.Time `json:"microscopyCrystalsDate"`
	MicroscopyBacteriaActive           *bool      `json:"microscopyBacteriaActive"`
	MicroscopyBacteriaResults          *string    `json:"microscopyBacteriaResults"`
	MicroscopyBacteriaDate             *time.Time `json:"microscopyBacteriaDate"`
	MicroscopyHcgActive                *bool      `json:"microscopyHcgActive"`
	MicroscopyHcgResults               *string    `json:"microscopyHcgResults"`
	MicroscopyHcgDate                  *time.Time `json:"microscopyHcgDate"`
	UrinalysisColorActive              *bool      `json:"urinalysisColorActive"`
	UrinalysisColorResults             *string    `json:"urinalysisColorResults"`
	UrinalysisColorDate                *time.Time `json:"urinalysisColorDate"`
	UrinalysisAppearanceActive         *bool      `json:"urinalysisAppearanceActive"`
	UrinalysisAppearanceResults        *string    `json:"urinalysisAppearanceResults"`
	UrinalysisAppearanceDate           *time.Time `json:"urinalysisAppearanceDate"`
	UrinalysisPhActive                 *bool      `json:"urinalysisPhActive"`
	UrinalysisPhResults                *string    `json:"urinalysisPhResults"`
	UrinalysisPhDate                   *time.Time `json:"urinalysisPhDate"`
	UrinalysisSgActive                 *bool      `json:"urinalysisSgActive"`
	UrinalysisSgResults                *string    `json:"urinalysisSgResults"`
	UrinalysisSgDate                   *time.Time `json:"urinalysisSgDate"`
	UrinalysisProteinActive            *bool      `json:"urinalysisProteinActive"`
	UrinalysisProteinResults           *string    `json:"urinalysisProteinResults"`
	UrinalysisProteinDate              *time.Time `json:"urinalysisProteinDate"`
	UrinalysisGlucoseActive            *bool      `json:"urinalysisGlucoseActive"`
	UrinalysisGlucoseResults           *string    `json:"urinalysisGlucoseResults"`
	UrinalysisGlucoseDate              *time.Time `json:"urinalysisGlucoseDate"`
	UrinalysisLeukocyteActive          *bool      `json:"urinalysisLeukocyteActive"`
	UrinalysisLeukocyteResults         *string    `json:"urinalysisLeukocyteResults"`
	UrinalysisLeukocyteDate            *time.Time `json:"urinalysisLeukocyteDate"`
	UrinalysisKetoneActive             *bool      `json:"urinalysisKetoneActive"`
	UrinalysisKetoneResults            *string    `json:"urinalysisKetoneResults"`
	UrinalysisKetoneDate               *time.Time `json:"urinalysisKetoneDate"`
	UrinalysisBilirubinActive          *bool      `json:"urinalysisBilirubinActive"`
	UrinalysisBilirubinResults         *string    `json:"urinalysisBilirubinResults"`
	UrinalysisBilirubinDate            *time.Time `json:"urinalysisBilirubinDate"`
	UrinalysisUrobilingenActive        *bool      `json:"urinalysisUrobilingenActive"`
	UrinalysisUrobilingenResults       *string    `json:"urinalysisUrobilingenResults"`
	UrinalysisUrobilingenDate          *time.Time `json:"urinalysisUrobilingenDate"`
	UrinalysisBloodActive              *bool      `json:"urinalysisBloodActive"`
	UrinalysisBloodResults             *string    `json:"urinalysisBloodResults"`
	UrinalysisBloodDate                *time.Time `json:"urinalysisBloodDate"`
	SerologyVdrlActive                 *bool      `json:"serologyVdrlActive"`
	SerologyVdrlResults                *string    `json:"serologyVdrlResults"`
	SerologyVdrlDate                   *time.Time `json:"serologyVdrlDate"`
	SerologyWidalHActive               *bool      `json:"serologyWidalHActive"`
	SerologyWidalHResults              *string    `json:"serologyWidalHResults"`
	SerologyWidalHDate                 *time.Time `json:"serologyWidalHDate"`
	SerologyWidalOActive               *bool      `json:"serologyWidalOActive"`
	SerologyWidalOResults              *string    `json:"serologyWidalOResults"`
	SerologyWidalODate                 *time.Time `json:"serologyWidalODate"`
	SerologyWeilFelixActive            *bool      `json:"serologyWeilFelixActive"`
	SerologyWeilFelixResults           *string    `json:"serologyWeilFelixResults"`
	SerologyWeilFelixDate              *time.Time `json:"serologyWeilFelixDate"`
	SerologyHbsAgActive                *bool      `json:"serologyHbsAgActive"`
	SerologyHbsAgResults               *string    `json:"serologyHbsAgResults"`
	SerologyHbsAgDate                  *time.Time `json:"serologyHbsAgDate"`
	SerologyHcvAbActive                *bool      `json:"serologyHcvAbActive"`
	SerologyHcvAbResults               *string    `json:"serologyHcvAbResults"`
	SerologyHcvAbDate                  *time.Time `json:"serologyHcvAbDate"`
	SerologyAsoActive                  *bool      `json:"serologyAsoActive"`
	SerologyAsoResults                 *string    `json:"serologyAsoResults"`
	SerologyAsoDate                    *time.Time `json:"serologyAsoDate"`
	SerologyRfActive                   *bool      `json:"serologyRfActive"`
	SerologyRfResults                  *string    `json:"serologyRfResults"`
	SerologyRfDate                     *time.Time `json:"serologyRfDate"`
	SerologyHpayloryAgActive           *bool      `json:"serologyHpayloryAgActive"`
	SerologyHpayloryAgResults          *string    `json:"serologyHpayloryAgResults"`
	SerologyHpayloryAgDate             *time.Time `json:"serologyHpayloryAgDate"`
	SerologyHpyloryAbActive            *bool      `json:"serologyHpyloryAbActive"`
	SerologyHpyloryAbResults           *string    `json:"serologyHpyloryAbResults"`
	SerologyHpyloryAbDate              *time.Time `json:"serologyHpyloryAbDate"`
	BacterologySampleActive            *bool      `json:"bacterologySampleActive"`
	BacterologySampleResults           *string    `json:"bacterologySampleResults"`
	BacterologySampleDate              *time.Time `json:"bacterologySampleDate"`
	BacterologyKohActive               *bool      `json:"bacterologyKohActive"`
	BacterologyKohResults              *string    `json:"bacterologyKohResults"`
	BacterologyKohDate                 *time.Time `json:"bacterologyKohDate"`
	BacterologyGramStainActive         *bool      `json:"bacterologyGramStainActive"`
	BacterologyGramStainResults        *string    `json:"bacterologyGramStainResults"`
	BacterologyGramStainDate           *time.Time `json:"bacterologyGramStainDate"`
	BacterologyWetFilmActive           *bool      `json:"bacterologyWetFilmActive"`
	BacterologyWetFilmResults          *string    `json:"bacterologyWetFilmResults"`
	BacterologyWetFilmDate             *time.Time `json:"bacterologyWetFilmDate"`
	BacterologyAfb1Active              *bool      `json:"bacterologyAfb1Active"`
	BacterologyAfb1Results             *string    `json:"bacterologyAfb1Results"`
	BacterologyAfb1Date                *time.Time `json:"bacterologyAfb1Date"`
	BacterologyAfb2Active              *bool      `json:"bacterologyAfb2Active"`
	BacterologyAfb2Results             *string    `json:"bacterologyAfb2Results"`
	BacterologyAfb2Date                *time.Time `json:"bacterologyAfb2Date"`
	BacterologyAfb3Active              *bool      `json:"bacterologyAfb3Active"`
	BacterologyAfb3Results             *string    `json:"bacterologyAfb3Results"`
	BacterologyAfb3Date                *time.Time `json:"bacterologyAfb3Date"`
	BacterologyCultureActive           *bool      `json:"bacterologyCultureActive"`
	BacterologyCultureResults          *string    `json:"bacterologyCultureResults"`
	BacterologyCultureDate             *time.Time `json:"bacterologyCultureDate"`
	ChemistryFbsRbsActive              *bool      `json:"chemistryFbsRbsActive"`
	ChemistryFbsRbsResults             *string    `json:"chemistryFbsRbsResults"`
	ChemistryFbsRbsDate                *time.Time `json:"chemistryFbsRbsDate"`
	ChemistrySgotActive                *bool      `json:"chemistrySgotActive"`
	ChemistrySgotResults               *string    `json:"chemistrySgotResults"`
	ChemistrySgotDate                  *time.Time `json:"chemistrySgotDate"`
	ChemistrySgptActive                *bool      `json:"chemistrySgptActive"`
	ChemistrySgptResults               *string    `json:"chemistrySgptResults"`
	ChemistrySgptDate                  *time.Time `json:"chemistrySgptDate"`
	ChemistryAlkalinePhosphatesActive  *bool      `json:"chemistryAlkalinePhosphatesActive"`
	ChemistryAlkalinePhosphatesResults *string    `json:"chemistryAlkalinePhosphatesResults"`
	ChemistryAlkalinePhosphatesDate    *time.Time `json:"chemistryAlkalinePhosphatesDate"`
	ChemistryBilirubinTotalActive      *bool      `json:"chemistryBilirubinTotalActive"`
	ChemistryBilirubinTotalResults     *string    `json:"chemistryBilirubinTotalResults"`
	ChemistryBilirubinTotalDate        *time.Time `json:"chemistryBilirubinTotalDate"`
	ChemistryBilirubinDirectActive     *bool      `json:"chemistryBilirubinDirectActive"`
	ChemistryBilirubinDirectResults    *string    `json:"chemistryBilirubinDirectResults"`
	ChemistryBilirubinDirectDate       *time.Time `json:"chemistryBilirubinDirectDate"`
	ChemistryUreaActive                *bool      `json:"chemistryUreaActive"`
	ChemistryUreaResults               *string    `json:"chemistryUreaResults"`
	ChemistryUreaDate                  *time.Time `json:"chemistryUreaDate"`
	ChemistryBunActive                 *bool      `json:"chemistryBunActive"`
	ChemistryBunResults                *string    `json:"chemistryBunResults"`
	ChemistryBunDate                   *time.Time `json:"chemistryBunDate"`
	ChemistryCreatnineActive           *bool      `json:"chemistryCreatnineActive"`
	ChemistryCreatnineResults          *string    `json:"chemistryCreatnineResults"`
	ChemistryCreatnineDate             *time.Time `json:"chemistryCreatnineDate"`
	ChemistryUricAcidActive            *bool      `json:"chemistryUricAcidActive"`
	ChemistryUricAcidResults           *string    `json:"chemistryUricAcidResults"`
	ChemistryUricAcidDate              *time.Time `json:"chemistryUricAcidDate"`
	ChemistryTotalProteinActive        *bool      `json:"chemistryTotalProteinActive"`
	ChemistryTotalProteinResults       *string    `json:"chemistryTotalProteinResults"`
	ChemistryTotalProteinDate          *time.Time `json:"chemistryTotalProteinDate"`
	ChemistryTriglyceridesActive       *bool      `json:"chemistryTriglyceridesActive"`
	ChemistryTriglyceridesResults      *string    `json:"chemistryTriglyceridesResults"`
	ChemistryTriglyceridesDate         *time.Time `json:"chemistryTriglyceridesDate"`
	ChemistryCholestrolActive          *bool      `json:"chemistryCholestrolActive"`
	ChemistryCholestrolResults         *string    `json:"chemistryCholestrolResults"`
	ChemistryCholestrolDate            *time.Time `json:"chemistryCholestrolDate"`
	ChemistryHdlActive                 *bool      `json:"chemistryHdlActive"`
	ChemistryHdlResults                *string    `json:"chemistryHdlResults"`
	ChemistryHdlDate                   *time.Time `json:"chemistryHdlDate"`
	ChemistryLdlActive                 *bool      `json:"chemistryLdlActive"`
	ChemistryLdlResults                *string    `json:"chemistryLdlResults"`
	ChemistryLdlDate                   *time.Time `json:"chemistryLdlDate"`
	RightEyeText                       *string    `json:"rightEyeText"`
	LeftEyeText                        *string    `json:"leftEyeText"`
	GeneralText                        *string    `json:"generalText"`
	RightEyeImageIds                   []*int     `json:"rightEyeImageIds"`
	LeftEyeImageIds                    []*int     `json:"leftEyeImageIds"`
	RightEyeSketcheIds                 []*int     `json:"rightEyeSketcheIds"`
	LeftEyeSketcheIds                  []*int     `json:"leftEyeSketcheIds"`
	DocumentIds                        []*int     `json:"documentIds"`
	LabIds                             []*int     `json:"labIds"`
}

type LabOrderConnection struct {
	TotalCount int             `json:"totalCount"`
	PageInfo   *PageInfo       `json:"pageInfo"`
	Edges      []*LabOrderEdge `json:"edges"`
}

func (LabOrderConnection) IsConnection() {}

type LabOrderEdge struct {
	Node *models.LabOrder `json:"node"`
}

type LabOrderFilter struct {
	PatientChartID *int    `json:"patientChartId"`
	OrderedByID    *int    `json:"orderedById"`
	PatientID      *int    `json:"patientId"`
	Status         *string `json:"status"`
}

type LabOrderUpdateInput struct {
	ID             int                    `json:"id"`
	PatientChartID *int                   `json:"patientChartId"`
	PatientID      *int                   `json:"patientId"`
	FirstName      *string                `json:"firstName"`
	LastName       *string                `json:"lastName"`
	PhoneNo        *string                `json:"phoneNo"`
	UserName       *string                `json:"userName"`
	OrderedByID    *int                   `json:"orderedById"`
	Status         *models.LabOrderStatus `json:"status"`
	OrderNote      *string                `json:"orderNote"`
	ReceptionNote  *string                `json:"receptionNote"`
}

type LabTypeConnection struct {
	TotalCount int            `json:"totalCount"`
	PageInfo   *PageInfo      `json:"pageInfo"`
	Edges      []*LabTypeEdge `json:"edges"`
}

func (LabTypeConnection) IsConnection() {}

type LabTypeEdge struct {
	Node *models.LabType `json:"node"`
}

type LabTypeInput struct {
	Title      string `json:"title"`
	Active     bool   `json:"active"`
	BillingIds []*int `json:"billingIds"`
}

type LabTypeUpdateInput struct {
	ID         int     `json:"id"`
	Title      *string `json:"title"`
	Active     *bool   `json:"active"`
	BillingIds []*int  `json:"billingIds"`
}

type LabUpdateInput struct {
	ID                                 int               `json:"id"`
	CbcWbcActive                       *bool             `json:"cbcWbcActive"`
	CbcWbcResults                      *string           `json:"cbcWbcResults"`
	CbcWbcDate                         *time.Time        `json:"cbcWbcDate"`
	CbcHgbActive                       *bool             `json:"cbcHgbActive"`
	CbcHgbResults                      *string           `json:"cbcHgbResults"`
	CbcHgbDate                         *time.Time        `json:"cbcHgbDate"`
	CbcHctActive                       *bool             `json:"cbcHctActive"`
	CbcHctResults                      *string           `json:"cbcHctResults"`
	CbcHctDate                         *time.Time        `json:"cbcHctDate"`
	CbcEsrActive                       *bool             `json:"cbcEsrActive"`
	CbcEsrResults                      *string           `json:"cbcEsrResults"`
	CbcEsrDate                         *time.Time        `json:"cbcEsrDate"`
	CbcBloodGroupActive                *bool             `json:"cbcBloodGroupActive"`
	CbcBloodGroupResults               *string           `json:"cbcBloodGroupResults"`
	CbcBloodGroupDate                  *time.Time        `json:"cbcBloodGroupDate"`
	CbcRhActive                        *bool             `json:"cbcRhActive"`
	CbcRhResults                       *string           `json:"cbcRhResults"`
	CbcRhDate                          *time.Time        `json:"cbcRhDate"`
	CbcBloodFilmActive                 *bool             `json:"cbcBloodFilmActive"`
	CbcBloodFilmResults                *string           `json:"cbcBloodFilmResults"`
	CbcBloodFilmDate                   *time.Time        `json:"cbcBloodFilmDate"`
	CbcPltActive                       *bool             `json:"cbcPltActive"`
	CbcPltResults                      *string           `json:"cbcPltResults"`
	CbcPltDate                         *time.Time        `json:"cbcPltDate"`
	LiverCoagulationPtActive           *bool             `json:"liverCoagulationPtActive"`
	LiverCoagulationPtResults          *string           `json:"liverCoagulationPtResults"`
	LiverCoagulationPtDate             *time.Time        `json:"liverCoagulationPtDate"`
	LiverCoagulationPttActive          *bool             `json:"liverCoagulationPttActive"`
	LiverCoagulationPttResults         *string           `json:"liverCoagulationPttResults"`
	LiverCoagulationPttDate            *time.Time        `json:"liverCoagulationPttDate"`
	LiverCoagulationInrActive          *bool             `json:"liverCoagulationInrActive"`
	LiverCoagulationInrResults         *string           `json:"liverCoagulationInrResults"`
	LiverCoagulationInrDate            *time.Time        `json:"liverCoagulationInrDate"`
	LiverAstsgotActive                 *bool             `json:"liverAstsgotActive"`
	LiverAstsgotResults                *string           `json:"liverAstsgotResults"`
	LiverAstsgotDate                   *time.Time        `json:"liverAstsgotDate"`
	LiverAltsgptActive                 *bool             `json:"liverAltsgptActive"`
	LiverAltsgptResults                *string           `json:"liverAltsgptResults"`
	LiverAltsgptDate                   *time.Time        `json:"liverAltsgptDate"`
	LiverAlpActive                     *bool             `json:"liverAlpActive"`
	LiverAlpResults                    *string           `json:"liverAlpResults"`
	LiverAlpDate                       *time.Time        `json:"liverAlpDate"`
	RenalCrActive                      *bool             `json:"renalCrActive"`
	RenalCrResults                     *string           `json:"renalCrResults"`
	RenalCrDate                        *time.Time        `json:"renalCrDate"`
	RenalBunActive                     *bool             `json:"renalBunActive"`
	RenalBunResults                    *string           `json:"renalBunResults"`
	RenalBunDate                       *time.Time        `json:"renalBunDate"`
	ThyroidFreeT3Active                *bool             `json:"thyroidFreeT3Active"`
	ThyroidFreeT3Results               *string           `json:"thyroidFreeT3Results"`
	ThyroidFreeT3Date                  *time.Time        `json:"thyroidFreeT3Date"`
	ThyroidTotalT4Active               *bool             `json:"thyroidTotalT4Active"`
	ThyroidTotalT4Results              *string           `json:"thyroidTotalT4Results"`
	ThyroidTotalT4Date                 *time.Time        `json:"thyroidTotalT4Date"`
	ThyroidTshActive                   *bool             `json:"thyroidTshActive"`
	ThyroidTshResults                  *string           `json:"thyroidTshResults"`
	ThyroidTshDate                     *time.Time        `json:"thyroidTshDate"`
	ElectrolytesNaPlusActive           *bool             `json:"electrolytesNaPlusActive"`
	ElectrolytesNaPlusResults          *string           `json:"electrolytesNaPlusResults"`
	ElectrolytesNaPlusDate             *time.Time        `json:"electrolytesNaPlusDate"`
	ElectrolytesKPlusActive            *bool             `json:"electrolytesKPlusActive"`
	ElectrolytesKPlusResults           *string           `json:"electrolytesKPlusResults"`
	ElectrolytesKPlusDate              *time.Time        `json:"electrolytesKPlusDate"`
	ElectrolytesClMinusActive          *bool             `json:"electrolytesClMinusActive"`
	ElectrolytesClMinusResults         *string           `json:"electrolytesClMinusResults"`
	ElectrolytesClMinusDate            *time.Time        `json:"electrolytesClMinusDate"`
	ElectrolytesCa2PlusActive          *bool             `json:"electrolytesCa2PlusActive"`
	ElectrolytesCa2PlusResults         *string           `json:"electrolytesCa2PlusResults"`
	ElectrolytesCa2PlusDate            *time.Time        `json:"electrolytesCa2PlusDate"`
	ElectrolytesMg2PlusActive          *bool             `json:"electrolytesMg2PlusActive"`
	ElectrolytesMg2PlusResults         *string           `json:"electrolytesMg2PlusResults"`
	ElectrolytesMg2PlusDate            *time.Time        `json:"electrolytesMg2PlusDate"`
	ElectrolytesPMinusActive           *bool             `json:"electrolytesPMinusActive"`
	ElectrolytesPMinusResults          *string           `json:"electrolytesPMinusResults"`
	ElectrolytesPMinusDate             *time.Time        `json:"electrolytesPMinusDate"`
	StoolConsistencyActive             *bool             `json:"stoolConsistencyActive"`
	StoolConsistencyResults            *string           `json:"stoolConsistencyResults"`
	StoolConsistencyDate               *time.Time        `json:"stoolConsistencyDate"`
	StoolOpActive                      *bool             `json:"stoolOpActive"`
	StoolOpResults                     *string           `json:"stoolOpResults"`
	StoolOpDate                        *time.Time        `json:"stoolOpDate"`
	StoolConcentrationActive           *bool             `json:"stoolConcentrationActive"`
	StoolConcentrationResults          *string           `json:"stoolConcentrationResults"`
	StoolConcentrationDate             *time.Time        `json:"stoolConcentrationDate"`
	StoolOccultBloodActive             *bool             `json:"stoolOccultBloodActive"`
	StoolOccultBloodResults            *string           `json:"stoolOccultBloodResults"`
	StoolOccultBloodDate               *time.Time        `json:"stoolOccultBloodDate"`
	MicroscopyEpitCellsActive          *bool             `json:"microscopyEpitCellsActive"`
	MicroscopyEpitCellsResults         *string           `json:"microscopyEpitCellsResults"`
	MicroscopyEpitCellsDate            *time.Time        `json:"microscopyEpitCellsDate"`
	MicroscopyWbcActive                *bool             `json:"microscopyWbcActive"`
	MicroscopyWbcResults               *string           `json:"microscopyWbcResults"`
	MicroscopyWbcDate                  *time.Time        `json:"microscopyWbcDate"`
	MicroscopyRbcActive                *bool             `json:"microscopyRbcActive"`
	MicroscopyRbcResults               *string           `json:"microscopyRbcResults"`
	MicroscopyRbcDate                  *time.Time        `json:"microscopyRbcDate"`
	MicroscopyCastsActive              *bool             `json:"microscopyCastsActive"`
	MicroscopyCastsResults             *string           `json:"microscopyCastsResults"`
	MicroscopyCastsDate                *time.Time        `json:"microscopyCastsDate"`
	MicroscopyCrystalsActive           *bool             `json:"microscopyCrystalsActive"`
	MicroscopyCrystalsResults          *string           `json:"microscopyCrystalsResults"`
	MicroscopyCrystalsDate             *time.Time        `json:"microscopyCrystalsDate"`
	MicroscopyBacteriaActive           *bool             `json:"microscopyBacteriaActive"`
	MicroscopyBacteriaResults          *string           `json:"microscopyBacteriaResults"`
	MicroscopyBacteriaDate             *time.Time        `json:"microscopyBacteriaDate"`
	MicroscopyHcgActive                *bool             `json:"microscopyHcgActive"`
	MicroscopyHcgResults               *string           `json:"microscopyHcgResults"`
	MicroscopyHcgDate                  *time.Time        `json:"microscopyHcgDate"`
	UrinalysisColorActive              *bool             `json:"urinalysisColorActive"`
	UrinalysisColorResults             *string           `json:"urinalysisColorResults"`
	UrinalysisColorDate                *time.Time        `json:"urinalysisColorDate"`
	UrinalysisAppearanceActive         *bool             `json:"urinalysisAppearanceActive"`
	UrinalysisAppearanceResults        *string           `json:"urinalysisAppearanceResults"`
	UrinalysisAppearanceDate           *time.Time        `json:"urinalysisAppearanceDate"`
	UrinalysisPhActive                 *bool             `json:"urinalysisPhActive"`
	UrinalysisPhResults                *string           `json:"urinalysisPhResults"`
	UrinalysisPhDate                   *time.Time        `json:"urinalysisPhDate"`
	UrinalysisSgActive                 *bool             `json:"urinalysisSgActive"`
	UrinalysisSgResults                *string           `json:"urinalysisSgResults"`
	UrinalysisSgDate                   *time.Time        `json:"urinalysisSgDate"`
	UrinalysisProteinActive            *bool             `json:"urinalysisProteinActive"`
	UrinalysisProteinResults           *string           `json:"urinalysisProteinResults"`
	UrinalysisProteinDate              *time.Time        `json:"urinalysisProteinDate"`
	UrinalysisGlucoseActive            *bool             `json:"urinalysisGlucoseActive"`
	UrinalysisGlucoseResults           *string           `json:"urinalysisGlucoseResults"`
	UrinalysisGlucoseDate              *time.Time        `json:"urinalysisGlucoseDate"`
	UrinalysisLeukocyteActive          *bool             `json:"urinalysisLeukocyteActive"`
	UrinalysisLeukocyteResults         *string           `json:"urinalysisLeukocyteResults"`
	UrinalysisLeukocyteDate            *time.Time        `json:"urinalysisLeukocyteDate"`
	UrinalysisKetoneActive             *bool             `json:"urinalysisKetoneActive"`
	UrinalysisKetoneResults            *string           `json:"urinalysisKetoneResults"`
	UrinalysisKetoneDate               *time.Time        `json:"urinalysisKetoneDate"`
	UrinalysisBilirubinActive          *bool             `json:"urinalysisBilirubinActive"`
	UrinalysisBilirubinResults         *string           `json:"urinalysisBilirubinResults"`
	UrinalysisBilirubinDate            *time.Time        `json:"urinalysisBilirubinDate"`
	UrinalysisUrobilingenActive        *bool             `json:"urinalysisUrobilingenActive"`
	UrinalysisUrobilingenResults       *string           `json:"urinalysisUrobilingenResults"`
	UrinalysisUrobilingenDate          *time.Time        `json:"urinalysisUrobilingenDate"`
	UrinalysisBloodActive              *bool             `json:"urinalysisBloodActive"`
	UrinalysisBloodResults             *string           `json:"urinalysisBloodResults"`
	UrinalysisBloodDate                *time.Time        `json:"urinalysisBloodDate"`
	SerologyVdrlActive                 *bool             `json:"serologyVdrlActive"`
	SerologyVdrlResults                *string           `json:"serologyVdrlResults"`
	SerologyVdrlDate                   *time.Time        `json:"serologyVdrlDate"`
	SerologyWidalHActive               *bool             `json:"serologyWidalHActive"`
	SerologyWidalHResults              *string           `json:"serologyWidalHResults"`
	SerologyWidalHDate                 *time.Time        `json:"serologyWidalHDate"`
	SerologyWidalOActive               *bool             `json:"serologyWidalOActive"`
	SerologyWidalOResults              *string           `json:"serologyWidalOResults"`
	SerologyWidalODate                 *time.Time        `json:"serologyWidalODate"`
	SerologyWeilFelixActive            *bool             `json:"serologyWeilFelixActive"`
	SerologyWeilFelixResults           *string           `json:"serologyWeilFelixResults"`
	SerologyWeilFelixDate              *time.Time        `json:"serologyWeilFelixDate"`
	SerologyHbsAgActive                *bool             `json:"serologyHbsAgActive"`
	SerologyHbsAgResults               *string           `json:"serologyHbsAgResults"`
	SerologyHbsAgDate                  *time.Time        `json:"serologyHbsAgDate"`
	SerologyHcvAbActive                *bool             `json:"serologyHcvAbActive"`
	SerologyHcvAbResults               *string           `json:"serologyHcvAbResults"`
	SerologyHcvAbDate                  *time.Time        `json:"serologyHcvAbDate"`
	SerologyAsoActive                  *bool             `json:"serologyAsoActive"`
	SerologyAsoResults                 *string           `json:"serologyAsoResults"`
	SerologyAsoDate                    *time.Time        `json:"serologyAsoDate"`
	SerologyRfActive                   *bool             `json:"serologyRfActive"`
	SerologyRfResults                  *string           `json:"serologyRfResults"`
	SerologyRfDate                     *time.Time        `json:"serologyRfDate"`
	SerologyHpayloryAgActive           *bool             `json:"serologyHpayloryAgActive"`
	SerologyHpayloryAgResults          *string           `json:"serologyHpayloryAgResults"`
	SerologyHpayloryAgDate             *time.Time        `json:"serologyHpayloryAgDate"`
	SerologyHpyloryAbActive            *bool             `json:"serologyHpyloryAbActive"`
	SerologyHpyloryAbResults           *string           `json:"serologyHpyloryAbResults"`
	SerologyHpyloryAbDate              *time.Time        `json:"serologyHpyloryAbDate"`
	BacterologySampleActive            *bool             `json:"bacterologySampleActive"`
	BacterologySampleResults           *string           `json:"bacterologySampleResults"`
	BacterologySampleDate              *time.Time        `json:"bacterologySampleDate"`
	BacterologyKohActive               *bool             `json:"bacterologyKohActive"`
	BacterologyKohResults              *string           `json:"bacterologyKohResults"`
	BacterologyKohDate                 *time.Time        `json:"bacterologyKohDate"`
	BacterologyGramStainActive         *bool             `json:"bacterologyGramStainActive"`
	BacterologyGramStainResults        *string           `json:"bacterologyGramStainResults"`
	BacterologyGramStainDate           *time.Time        `json:"bacterologyGramStainDate"`
	BacterologyWetFilmActive           *bool             `json:"bacterologyWetFilmActive"`
	BacterologyWetFilmResults          *string           `json:"bacterologyWetFilmResults"`
	BacterologyWetFilmDate             *time.Time        `json:"bacterologyWetFilmDate"`
	BacterologyAfb1Active              *bool             `json:"bacterologyAfb1Active"`
	BacterologyAfb1Results             *string           `json:"bacterologyAfb1Results"`
	BacterologyAfb1Date                *time.Time        `json:"bacterologyAfb1Date"`
	BacterologyAfb2Active              *bool             `json:"bacterologyAfb2Active"`
	BacterologyAfb2Results             *string           `json:"bacterologyAfb2Results"`
	BacterologyAfb2Date                *time.Time        `json:"bacterologyAfb2Date"`
	BacterologyAfb3Active              *bool             `json:"bacterologyAfb3Active"`
	BacterologyAfb3Results             *string           `json:"bacterologyAfb3Results"`
	BacterologyAfb3Date                *time.Time        `json:"bacterologyAfb3Date"`
	BacterologyCultureActive           *bool             `json:"bacterologyCultureActive"`
	BacterologyCultureResults          *string           `json:"bacterologyCultureResults"`
	BacterologyCultureDate             *time.Time        `json:"bacterologyCultureDate"`
	ChemistryFbsRbsActive              *bool             `json:"chemistryFbsRbsActive"`
	ChemistryFbsRbsResults             *string           `json:"chemistryFbsRbsResults"`
	ChemistryFbsRbsDate                *time.Time        `json:"chemistryFbsRbsDate"`
	ChemistrySgotActive                *bool             `json:"chemistrySgotActive"`
	ChemistrySgotResults               *string           `json:"chemistrySgotResults"`
	ChemistrySgotDate                  *time.Time        `json:"chemistrySgotDate"`
	ChemistrySgptActive                *bool             `json:"chemistrySgptActive"`
	ChemistrySgptResults               *string           `json:"chemistrySgptResults"`
	ChemistrySgptDate                  *time.Time        `json:"chemistrySgptDate"`
	ChemistryAlkalinePhosphatesActive  *bool             `json:"chemistryAlkalinePhosphatesActive"`
	ChemistryAlkalinePhosphatesResults *string           `json:"chemistryAlkalinePhosphatesResults"`
	ChemistryAlkalinePhosphatesDate    *time.Time        `json:"chemistryAlkalinePhosphatesDate"`
	ChemistryBilirubinTotalActive      *bool             `json:"chemistryBilirubinTotalActive"`
	ChemistryBilirubinTotalResults     *string           `json:"chemistryBilirubinTotalResults"`
	ChemistryBilirubinTotalDate        *time.Time        `json:"chemistryBilirubinTotalDate"`
	ChemistryBilirubinDirectActive     *bool             `json:"chemistryBilirubinDirectActive"`
	ChemistryBilirubinDirectResults    *string           `json:"chemistryBilirubinDirectResults"`
	ChemistryBilirubinDirectDate       *time.Time        `json:"chemistryBilirubinDirectDate"`
	ChemistryUreaActive                *bool             `json:"chemistryUreaActive"`
	ChemistryUreaResults               *string           `json:"chemistryUreaResults"`
	ChemistryUreaDate                  *time.Time        `json:"chemistryUreaDate"`
	ChemistryBunActive                 *bool             `json:"chemistryBunActive"`
	ChemistryBunResults                *string           `json:"chemistryBunResults"`
	ChemistryBunDate                   *time.Time        `json:"chemistryBunDate"`
	ChemistryCreatnineActive           *bool             `json:"chemistryCreatnineActive"`
	ChemistryCreatnineResults          *string           `json:"chemistryCreatnineResults"`
	ChemistryCreatnineDate             *time.Time        `json:"chemistryCreatnineDate"`
	ChemistryUricAcidActive            *bool             `json:"chemistryUricAcidActive"`
	ChemistryUricAcidResults           *string           `json:"chemistryUricAcidResults"`
	ChemistryUricAcidDate              *time.Time        `json:"chemistryUricAcidDate"`
	ChemistryTotalProteinActive        *bool             `json:"chemistryTotalProteinActive"`
	ChemistryTotalProteinResults       *string           `json:"chemistryTotalProteinResults"`
	ChemistryTotalProteinDate          *time.Time        `json:"chemistryTotalProteinDate"`
	ChemistryTriglyceridesActive       *bool             `json:"chemistryTriglyceridesActive"`
	ChemistryTriglyceridesResults      *string           `json:"chemistryTriglyceridesResults"`
	ChemistryTriglyceridesDate         *time.Time        `json:"chemistryTriglyceridesDate"`
	ChemistryCholestrolActive          *bool             `json:"chemistryCholestrolActive"`
	ChemistryCholestrolResults         *string           `json:"chemistryCholestrolResults"`
	ChemistryCholestrolDate            *time.Time        `json:"chemistryCholestrolDate"`
	ChemistryHdlActive                 *bool             `json:"chemistryHdlActive"`
	ChemistryHdlResults                *string           `json:"chemistryHdlResults"`
	ChemistryHdlDate                   *time.Time        `json:"chemistryHdlDate"`
	ChemistryLdlActive                 *bool             `json:"chemistryLdlActive"`
	ChemistryLdlResults                *string           `json:"chemistryLdlResults"`
	ChemistryLdlDate                   *time.Time        `json:"chemistryLdlDate"`
	RightEyeText                       *string           `json:"rightEyeText"`
	LeftEyeText                        *string           `json:"leftEyeText"`
	GeneralText                        *string           `json:"generalText"`
	RightEyeImages                     []*FileUpload     `json:"rightEyeImages"`
	LeftEyeImages                      []*FileUpload     `json:"leftEyeImages"`
	RightEyeSketches                   []*FileUpload     `json:"rightEyeSketches"`
	LeftEyeSketches                    []*FileUpload     `json:"leftEyeSketches"`
	Documents                          []*FileUpload     `json:"documents"`
	Images                             []*FileUpload     `json:"images"`
	Status                             *models.LabStatus `json:"status"`
}

type LifestyleInput struct {
	Title            string `json:"title"`
	Description      string `json:"description"`
	Note             string `json:"note"`
	PatientHistoryID int    `json:"patientHistoryId"`
}

type LifestyleTypeConnection struct {
	TotalCount int                  `json:"totalCount"`
	PageInfo   *PageInfo            `json:"pageInfo"`
	Edges      []*LifestyleTypeEdge `json:"edges"`
}

func (LifestyleTypeConnection) IsConnection() {}

type LifestyleTypeEdge struct {
	Node *models.LifestyleType `json:"node"`
}

type LifestyleTypeInput struct {
	Title string `json:"title"`
}

type LifestyleTypeUpdateInput struct {
	ID    int    `json:"id"`
	Title string `json:"title"`
}

type LifestyleUpdateInput struct {
	ID          int     `json:"id"`
	Title       *string `json:"title"`
	Note        *string `json:"note"`
	Description *string `json:"description"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type MedicalPrescriptionConnection struct {
	TotalCount int                        `json:"totalCount"`
	PageInfo   *PageInfo                  `json:"pageInfo"`
	Edges      []*MedicalPrescriptionEdge `json:"edges"`
}

func (MedicalPrescriptionConnection) IsConnection() {}

type MedicalPrescriptionEdge struct {
	Node *models.MedicalPrescription `json:"node"`
}

type MedicalPrescriptionFilter struct {
	ID             *int    `json:"id"`
	PatientChartID *int    `json:"patientChartId"`
	PatientID      *int    `json:"patientId"`
	Medication     *string `json:"medication"`
	RxCui          *string `json:"rxCui"`
	Status         *string `json:"status"`
	History        *bool   `json:"history"`
}

type MedicalPrescriptionInput struct {
	PatientID           int        `json:"patientId"`
	Medication          string     `json:"medication"`
	RxCui               *string    `json:"rxCui"`
	Synonym             *string    `json:"synonym"`
	Tty                 *string    `json:"tty"`
	Language            *string    `json:"language"`
	Sig                 *string    `json:"sig"`
	Refill              *int       `json:"refill"`
	Generic             *bool      `json:"generic"`
	SubstitutionAllowed *bool      `json:"substitutionAllowed"`
	DirectionToPatient  *string    `json:"directionToPatient"`
	PrescribedDate      *time.Time `json:"prescribedDate"`
	History             bool       `json:"history"`
	Status              *string    `json:"status"`
}

type MedicalPrescriptionOrderConnection struct {
	TotalCount int                             `json:"totalCount"`
	PageInfo   *PageInfo                       `json:"pageInfo"`
	Edges      []*MedicalPrescriptionOrderEdge `json:"edges"`
}

func (MedicalPrescriptionOrderConnection) IsConnection() {}

type MedicalPrescriptionOrderEdge struct {
	Node *models.MedicalPrescriptionOrder `json:"node"`
}

type MedicalPrescriptionOrderInput struct {
	PatientChartID      int        `json:"patientChartId"`
	PatientID           int        `json:"patientId"`
	PharmacyID          int        `json:"pharmacyId"`
	Medication          string     `json:"medication"`
	RxCui               *string    `json:"rxCui"`
	Synonym             *string    `json:"synonym"`
	Tty                 *string    `json:"tty"`
	Language            *string    `json:"language"`
	Sig                 *string    `json:"sig"`
	Refill              *int       `json:"refill"`
	Generic             *bool      `json:"generic"`
	SubstitutionAllowed *bool      `json:"substitutionAllowed"`
	DirectionToPatient  *string    `json:"directionToPatient"`
	PrescribedDate      *time.Time `json:"prescribedDate"`
	History             bool       `json:"history"`
	Status              *string    `json:"status"`
}

type MedicalPrescriptionUpdateInput struct {
	ID                  int        `json:"id"`
	PharmacyID          *int       `json:"pharmacyId"`
	Medication          *string    `json:"medication"`
	RxCui               *string    `json:"rxCui"`
	Synonym             *string    `json:"synonym"`
	Tty                 *string    `json:"tty"`
	Language            *string    `json:"language"`
	Sig                 *string    `json:"sig"`
	Refill              *int       `json:"refill"`
	Generic             *bool      `json:"generic"`
	SubstitutionAllowed *bool      `json:"substitutionAllowed"`
	DirectionToPatient  *string    `json:"directionToPatient"`
	PrescribedDate      *time.Time `json:"prescribedDate"`
	EyewearShopID       *int       `json:"eyewearShopId"`
	Status              *string    `json:"status"`
}

type MedicationPrescriptionUpdateInput struct {
	ID         int     `json:"id"`
	PharmacyID *int    `json:"pharmacyId"`
	Status     *string `json:"status"`
}

type ModalityConnection struct {
	TotalCount int             `json:"totalCount"`
	PageInfo   *PageInfo       `json:"pageInfo"`
	Edges      []*ModalityEdge `json:"edges"`
}

func (ModalityConnection) IsConnection() {}

type ModalityEdge struct {
	Node *models.Modality `json:"node"`
}

type ModalityFilter struct {
	Active *bool `json:"active"`
}

type ModalityUpdateInput struct {
	ID          int     `json:"id"`
	Value       *string `json:"value"`
	Description *string `json:"description"`
	Active      *bool   `json:"active"`
}

type NewTodo struct {
	Text   string `json:"text"`
	UserID string `json:"userId"`
}

// Copyright 2021 Kidus Tiliksew
//
// This file is part of Tensor EMR.
//
// Tensor EMR is free software: you can redistribute it and/or modify
// it under the terms of the version 2 of GNU General Public License as published by
// the Free Software Foundation.
//
// Tensor EMR is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
type Notif struct {
	DiagnosticProcedureOrders int `json:"diagnosticProcedureOrders"`
	LabOrders                 int `json:"labOrders"`
	TreatmentOrders           int `json:"treatmentOrders"`
	SurgicalOrders            int `json:"surgicalOrders"`
	ReferralOrders            int `json:"referralOrders"`
	FollowUpOrders            int `json:"followUpOrders"`
	PaymentWaivers            int `json:"paymentWaivers"`
}

type Notification struct {
	Message string    `json:"message"`
	Type    NotifType `json:"type"`
	ID      int       `json:"id"`
}

type OphthalmologyExamFilter struct {
	ID             *int `json:"id"`
	PatientChartID *int `json:"patientChartId"`
}

type OpthalmologyExamInput struct {
	PatientChartID       int     `json:"patientChartId"`
	RightOrbits          *string `json:"rightOrbits"`
	LeftOrbits           *string `json:"leftOrbits"`
	RightLids            *string `json:"rightLids"`
	LeftLids             *string `json:"leftLids"`
	RightLacrimalSystem  *string `json:"rightLacrimalSystem"`
	LeftLacrimalSystem   *string `json:"leftLacrimalSystem"`
	ExternalExamNote     *string `json:"externalExamNote"`
	RightCoverTest       *string `json:"rightCoverTest"`
	LeftCoverTest        *string `json:"leftCoverTest"`
	CoverTestNote        *string `json:"coverTestNote"`
	RightRetina          *string `json:"rightRetina"`
	LeftRetina           *string `json:"leftRetina"`
	LeftRetinaSketch     *string `json:"leftRetinaSketch"`
	RightRetinaSketch    *string `json:"rightRetinaSketch"`
	FunduscopyNote       *string `json:"funduscopyNote"`
	RightOcularMotility  *string `json:"rightOcularMotility"`
	LeftOcularMotility   *string `json:"leftOcularMotility"`
	Rsr                  *string `json:"rsr"`
	Rio                  *string `json:"rio"`
	Rlr                  *string `json:"rlr"`
	Rmr                  *string `json:"rmr"`
	Rir                  *string `json:"rir"`
	Rso                  *string `json:"rso"`
	RightFlick           *bool   `json:"rightFlick"`
	Lsr                  *string `json:"lsr"`
	Lio                  *string `json:"lio"`
	Llr                  *string `json:"llr"`
	Lmr                  *string `json:"lmr"`
	Lir                  *string `json:"lir"`
	Lso                  *string `json:"lso"`
	LeftFlick            *bool   `json:"leftFlick"`
	Distance             *string `json:"distance"`
	Near                 *string `json:"near"`
	OcularMotilityNote   *string `json:"ocularMotilityNote"`
	RightOpticDisc       *string `json:"rightOpticDisc"`
	LeftOpticDisc        *string `json:"leftOpticDisc"`
	RightOpticDiscSketch *string `json:"rightOpticDiscSketch"`
	LeftOpticDiscSketch  *string `json:"leftOpticDiscSketch"`
	RightCdr             *string `json:"rightCdr"`
	LeftCdr              *string `json:"leftCdr"`
	OpticDiscNote        *string `json:"opticDiscNote"`
	RightPupils          *string `json:"rightPupils"`
	LeftPupils           *string `json:"leftPupils"`
	PupilsNote           *string `json:"pupilsNote"`
	RightConjunctiva     *string `json:"rightConjunctiva"`
	LeftConjunctiva      *string `json:"leftConjunctiva"`
	RightCornea          *string `json:"rightCornea"`
	LeftCornea           *string `json:"leftCornea"`
	RightCorneaSketch    *string `json:"rightCorneaSketch"`
	LeftCorneaSketch     *string `json:"leftCorneaSketch"`
	LeftSclera           *string `json:"leftSclera"`
	RightSclera          *string `json:"rightSclera"`
	RightAnteriorChamber *string `json:"rightAnteriorChamber"`
	LeftAnteriorChamber  *string `json:"leftAnteriorChamber"`
	RightIris            *string `json:"rightIris"`
	LeftIris             *string `json:"leftIris"`
	RightLens            *string `json:"rightLens"`
	LeftLens             *string `json:"leftLens"`
	RightLensSketch      *string `json:"rightLensSketch"`
	LeftLensSketch       *string `json:"leftLensSketch"`
	RightVitreos         *string `json:"rightVitreos"`
	LeftVitreos          *string `json:"leftVitreos"`
	SlitLampExamNote     *string `json:"slitLampExamNote"`
}

type OpthalmologyExamUpdateInput struct {
	ID                   int     `json:"id"`
	RightOrbits          *string `json:"rightOrbits"`
	LeftOrbits           *string `json:"leftOrbits"`
	RightLids            *string `json:"rightLids"`
	LeftLids             *string `json:"leftLids"`
	RightLacrimalSystem  *string `json:"rightLacrimalSystem"`
	LeftLacrimalSystem   *string `json:"leftLacrimalSystem"`
	ExternalExamNote     *string `json:"externalExamNote"`
	RightCoverTest       *string `json:"rightCoverTest"`
	LeftCoverTest        *string `json:"leftCoverTest"`
	CoverTestNote        *string `json:"coverTestNote"`
	RightRetina          *string `json:"rightRetina"`
	LeftRetina           *string `json:"leftRetina"`
	LeftRetinaSketch     *string `json:"leftRetinaSketch"`
	RightRetinaSketch    *string `json:"rightRetinaSketch"`
	FunduscopyNote       *string `json:"funduscopyNote"`
	RightOcularMotility  *string `json:"rightOcularMotility"`
	LeftOcularMotility   *string `json:"leftOcularMotility"`
	Rsr                  *string `json:"rsr"`
	Rio                  *string `json:"rio"`
	Rlr                  *string `json:"rlr"`
	Rmr                  *string `json:"rmr"`
	Rir                  *string `json:"rir"`
	Rso                  *string `json:"rso"`
	RightFlick           *bool   `json:"rightFlick"`
	Lsr                  *string `json:"lsr"`
	Lio                  *string `json:"lio"`
	Llr                  *string `json:"llr"`
	Lmr                  *string `json:"lmr"`
	Lir                  *string `json:"lir"`
	Lso                  *string `json:"lso"`
	LeftFlick            *bool   `json:"leftFlick"`
	Distance             *string `json:"distance"`
	Near                 *string `json:"near"`
	OcularMotilityNote   *string `json:"ocularMotilityNote"`
	RightOpticDisc       *string `json:"rightOpticDisc"`
	LeftOpticDisc        *string `json:"leftOpticDisc"`
	RightOpticDiscSketch *string `json:"rightOpticDiscSketch"`
	LeftOpticDiscSketch  *string `json:"leftOpticDiscSketch"`
	RightCdr             *string `json:"rightCdr"`
	LeftCdr              *string `json:"leftCdr"`
	OpticDiscNote        *string `json:"opticDiscNote"`
	RightPupils          *string `json:"rightPupils"`
	LeftPupils           *string `json:"leftPupils"`
	PupilsNote           *string `json:"pupilsNote"`
	RightConjunctiva     *string `json:"rightConjunctiva"`
	LeftConjunctiva      *string `json:"leftConjunctiva"`
	RightCornea          *string `json:"rightCornea"`
	LeftCornea           *string `json:"leftCornea"`
	RightCorneaSketch    *string `json:"rightCorneaSketch"`
	LeftCorneaSketch     *string `json:"leftCorneaSketch"`
	LeftSclera           *string `json:"leftSclera"`
	RightSclera          *string `json:"rightSclera"`
	RightAnteriorChamber *string `json:"rightAnteriorChamber"`
	LeftAnteriorChamber  *string `json:"leftAnteriorChamber"`
	RightIris            *string `json:"rightIris"`
	LeftIris             *string `json:"leftIris"`
	RightLens            *string `json:"rightLens"`
	LeftLens             *string `json:"leftLens"`
	RightLensSketch      *string `json:"rightLensSketch"`
	LeftLensSketch       *string `json:"leftLensSketch"`
	RightVitreos         *string `json:"rightVitreos"`
	LeftVitreos          *string `json:"leftVitreos"`
	SlitLampExamNote     *string `json:"slitLampExamNote"`
}

type OrderAndConfirmDiagnosticProcedureInput struct {
	AppointmentID             int    `json:"appointmentId"`
	PatientID                 int    `json:"patientId"`
	DiagnosticProcedureTypeID int    `json:"diagnosticProcedureTypeId"`
	BillingID                 int    `json:"billingId"`
	InvoiceNo                 string `json:"invoiceNo"`
	OrderNote                 string `json:"orderNote"`
}

type OrderAndConfirmLabInput struct {
	AppointmentID int    `json:"appointmentId"`
	PatientID     int    `json:"patientId"`
	LabTypeID     int    `json:"labTypeId"`
	BillingIds    []int  `json:"billingIds"`
	InvoiceNo     string `json:"invoiceNo"`
	OrderNote     string `json:"orderNote"`
}

type OrderAndConfirmSurgicalProcedureInput struct {
	ProviderID              int       `json:"providerId"`
	PatientID               int       `json:"patientId"`
	SurgicalProcedureTypeID int       `json:"surgicalProcedureTypeId"`
	BillingID               int       `json:"billingId"`
	InvoiceNo               string    `json:"invoiceNo"`
	OrderNote               string    `json:"orderNote"`
	CheckInTime             time.Time `json:"checkInTime"`
	RoomID                  int       `json:"roomId"`
	VisitTypeID             int       `json:"visitTypeId"`
	PerformOnEye            string    `json:"performOnEye"`
}

type OrderDiagnosticProcedureInput struct {
	DiagnosticProcedureTypeID int     `json:"diagnosticProcedureTypeId"`
	PatientChartID            int     `json:"patientChartId"`
	AppointmentID             int     `json:"appointmentId"`
	PatientID                 int     `json:"patientId"`
	BillingID                 int     `json:"billingId"`
	OrderNote                 string  `json:"orderNote"`
	ReceptionNote             string  `json:"receptionNote"`
	Modality                  *string `json:"modality"`
}

type OrderFilterInput struct {
	UserID         *int       `json:"userId"`
	AppointmentID  *int       `json:"appointmentId"`
	PatientChartID *int       `json:"patientChartId"`
	Status         *string    `json:"status"`
	OrderType      *string    `json:"orderType"`
	SearchTerm     *string    `json:"searchTerm"`
	Date           *time.Time `json:"date"`
}

type OrderFollowUpInput struct {
	PatientChartID int    `json:"patientChartId"`
	PatientID      int    `json:"patientId"`
	ReceptionNote  string `json:"receptionNote"`
}

type OrderLabInput struct {
	LabTypeID      int    `json:"labTypeId"`
	PatientChartID int    `json:"patientChartId"`
	PatientID      int    `json:"patientId"`
	BillingIds     []int  `json:"billingIds"`
	OrderNote      string `json:"orderNote"`
	ReceptionNote  string `json:"receptionNote"`
}

type OrderReferralInput struct {
	PatientChartID int                 `json:"patientChartId"`
	PatientID      int                 `json:"patientId"`
	ReceptionNote  *string             `json:"receptionNote"`
	Reason         string              `json:"reason"`
	ReferredToID   *int                `json:"referredToId"`
	ProviderName   *string             `json:"providerName"`
	Type           models.ReferralType `json:"type"`
}

type OrderSurgicalInput struct {
	SurgicalProcedureTypeID int    `json:"surgicalProcedureTypeId"`
	PatientChartID          int    `json:"patientChartId"`
	AppointmentID           int    `json:"appointmentId"`
	PatientID               int    `json:"patientId"`
	BillingID               int    `json:"billingId"`
	PerformOnEye            string `json:"performOnEye"`
	OrderNote               string `json:"orderNote"`
	ReceptionNote           string `json:"receptionNote"`
}

type OrderTreatmentInput struct {
	TreatmentTypeID int    `json:"treatmentTypeId"`
	PatientChartID  int    `json:"patientChartId"`
	AppointmentID   int    `json:"appointmentId"`
	PatientID       int    `json:"patientId"`
	BillingID       int    `json:"billingId"`
	OrderNote       string `json:"orderNote"`
	TreatmentNote   string `json:"treatmentNote"`
}

type OrdersCount struct {
	DiagnosticProcedureOrders int `json:"diagnosticProcedureOrders"`
	LabOrders                 int `json:"labOrders"`
	TreatmentOrders           int `json:"treatmentOrders"`
	SurgicalOrders            int `json:"surgicalOrders"`
	ReferralOrders            int `json:"referralOrders"`
	FollowUpOrders            int `json:"followUpOrders"`
}

type OrganizationDetailsInput struct {
	Name                     *string     `json:"name"`
	PhoneNo                  *string     `json:"phoneNo"`
	PhoneNo2                 *string     `json:"phoneNo2"`
	Address                  *string     `json:"address"`
	Address2                 *string     `json:"address2"`
	Website                  *string     `json:"website"`
	Email                    *string     `json:"email"`
	LanIPAddress             *string     `json:"lanIpAddress"`
	Logo                     *FileUpload `json:"logo"`
	DefaultMedicalDepartment *string     `json:"defaultMedicalDepartment"`
}

type PageInfo struct {
	TotalPages int `json:"totalPages"`
}

type PastHospitalizationInput struct {
	Reason           string     `json:"reason"`
	Provider         string     `json:"provider"`
	From             *time.Time `json:"from"`
	To               *time.Time `json:"to"`
	PatientHistoryID int        `json:"patientHistoryId"`
}

type PastHospitalizationUpdateInput struct {
	ID       int        `json:"id"`
	Reason   *string    `json:"reason"`
	Provider *string    `json:"provider"`
	From     *time.Time `json:"from"`
	To       *time.Time `json:"to"`
}

type PastIllnessInput struct {
	ConceptID      string   `json:"conceptId"`
	Term           string   `json:"term"`
	Attributes     []string `json:"attributes"`
	Memo           *string  `json:"memo"`
	PatientChartID int      `json:"patientChartId"`
}

type PastIllnessTypeConnection struct {
	TotalCount int                    `json:"totalCount"`
	PageInfo   *PageInfo              `json:"pageInfo"`
	Edges      []*PastIllnessTypeEdge `json:"edges"`
}

func (PastIllnessTypeConnection) IsConnection() {}

type PastIllnessTypeEdge struct {
	Node *models.PastIllnessType `json:"node"`
}

type PastIllnessTypeInput struct {
	Title string `json:"title"`
}

type PastIllnessTypeUpdateInput struct {
	ID    int    `json:"id"`
	Title string `json:"title"`
}

type PastIllnessUpdateInput struct {
	ConceptID  string   `json:"conceptId"`
	Attributes []string `json:"attributes"`
	Memo       *string  `json:"memo"`
}

type PastInjuryInput struct {
	Description      string     `json:"description"`
	InjuryDate       *time.Time `json:"injuryDate"`
	PatientHistoryID int        `json:"patientHistoryId"`
}

type PastInjuryUpdateInput struct {
	ID          int        `json:"id"`
	Description *string    `json:"description"`
	InjuryDate  *time.Time `json:"injuryDate"`
}

type PastSurgeryInput struct {
	Description      string     `json:"description"`
	SurgeryDate      *time.Time `json:"surgeryDate"`
	PatientHistoryID int        `json:"patientHistoryId"`
}

type PastSurgeryUpdateInput struct {
	ID          int        `json:"id"`
	Description *string    `json:"description"`
	SurgeryDate *time.Time `json:"surgeryDate"`
}

type PatientChartConnection struct {
	TotalCount int                 `json:"totalCount"`
	PageInfo   *PageInfo           `json:"pageInfo"`
	Edges      []*PatientChartEdge `json:"edges"`
}

func (PatientChartConnection) IsConnection() {}

type PatientChartEdge struct {
	Node *models.PatientChart `json:"node"`
}

type PatientChartInput struct {
	AppointmentID             int      `json:"appointmentId"`
	Temperature               *float64 `json:"temperature"`
	Pulse                     *float64 `json:"pulse"`
	BloodPressureSystolic     *float64 `json:"bloodPressureSystolic"`
	BloodPressureDiastolic    *float64 `json:"bloodPressureDiastolic"`
	RespiratoryRate           *float64 `json:"respiratoryRate"`
	OxygenSaturation          *float64 `json:"oxygenSaturation"`
	Height                    *float64 `json:"height"`
	Weight                    *float64 `json:"weight"`
	Bmi                       *float64 `json:"bmi"`
	HpiNote                   *string  `json:"hpiNote"`
	DiagnosisNote             *string  `json:"diagnosisNote"`
	DifferentialDiagnosisNote *string  `json:"differentialDiagnosisNote"`
	RightSummarySketch        *string  `json:"rightSummarySketch"`
	LeftSummarySketch         *string  `json:"leftSummarySketch"`
	BloodPressure             *string  `json:"bloodPressure"`
	SummaryNote               *string  `json:"summaryNote"`
	StickieNote               *string  `json:"stickieNote"`
	MedicalRecommendation     *string  `json:"medicalRecommendation"`
	SickLeave                 *string  `json:"sickLeave"`
	IllnessType               *string  `json:"illnessType"`
}

type PatientChartUpdateInput struct {
	ID                        int      `json:"id"`
	Temperature               *float64 `json:"temperature"`
	Pulse                     *float64 `json:"pulse"`
	BloodPressureSystolic     *float64 `json:"bloodPressureSystolic"`
	BloodPressureDiastolic    *float64 `json:"bloodPressureDiastolic"`
	RespiratoryRate           *float64 `json:"respiratoryRate"`
	OxygenSaturation          *float64 `json:"oxygenSaturation"`
	Height                    *float64 `json:"height"`
	Weight                    *float64 `json:"weight"`
	Bmi                       *float64 `json:"bmi"`
	ChiefComplaintsNote       *string  `json:"chiefComplaintsNote"`
	BloodPressure             *string  `json:"bloodPressure"`
	HpiNote                   *string  `json:"hpiNote"`
	DiagnosisNote             *string  `json:"diagnosisNote"`
	DifferentialDiagnosisNote *string  `json:"differentialDiagnosisNote"`
	RightSummarySketch        *string  `json:"rightSummarySketch"`
	LeftSummarySketch         *string  `json:"leftSummarySketch"`
	SummaryNote               *string  `json:"summaryNote"`
	StickieNote               *string  `json:"stickieNote"`
	MedicalRecommendation     *string  `json:"medicalRecommendation"`
	SickLeave                 *string  `json:"sickLeave"`
	IllnessType               *string  `json:"illnessType"`
}

type PatientConnection struct {
	TotalCount int            `json:"totalCount"`
	PageInfo   *PageInfo      `json:"pageInfo"`
	Edges      []*PatientEdge `json:"edges"`
}

func (PatientConnection) IsConnection() {}

type PatientDiagnosisConnection struct {
	TotalCount int                     `json:"totalCount"`
	PageInfo   *PageInfo               `json:"pageInfo"`
	Edges      []*PatientDiagnosisEdge `json:"edges"`
}

func (PatientDiagnosisConnection) IsConnection() {}

type PatientDiagnosisEdge struct {
	Node *models.PatientDiagnosis `json:"node"`
}

type PatientDiagnosisFilter struct {
	ID             *int    `json:"id"`
	Code           *string `json:"code"`
	Title          *string `json:"title"`
	Differential   *bool   `json:"differential"`
	PatientChartID *int    `json:"patientChartId"`
}

type PatientDiagnosisInput struct {
	DiagnosisID    int     `json:"diagnosisId"`
	Location       *string `json:"location"`
	Differential   bool    `json:"differential"`
	PatientChartID int     `json:"patientChartId"`
}

type PatientDiagnosisUpdateInput struct {
	ID             int     `json:"id"`
	DiagnosisID    *int    `json:"diagnosisId"`
	Location       *string `json:"location"`
	Differential   *bool   `json:"differential"`
	PatientChartID *int    `json:"patientChartId"`
}

type PatientEdge struct {
	Node *models.Patient `json:"node"`
}

type PatientEncounterLimitConnection struct {
	TotalCount int                          `json:"totalCount"`
	PageInfo   *PageInfo                    `json:"pageInfo"`
	Edges      []*PatientEncounterLimitEdge `json:"edges"`
}

func (PatientEncounterLimitConnection) IsConnection() {}

type PatientEncounterLimitEdge struct {
	Node *models.PatientEncounterLimit `json:"node"`
}

type PatientEncounterLimitInput struct {
	UserID         int `json:"userId"`
	MondayLimit    int `json:"mondayLimit"`
	TuesdayLimit   int `json:"tuesdayLimit"`
	WednesdayLimit int `json:"wednesdayLimit"`
	ThursdayLimit  int `json:"thursdayLimit"`
	FridayLimit    int `json:"fridayLimit"`
	SaturdayLimit  int `json:"saturdayLimit"`
	SundayLimit    int `json:"sundayLimit"`
}

type PatientEncounterLimitUpdateInput struct {
	ID             int  `json:"id"`
	UserID         *int `json:"userId"`
	MondayLimit    *int `json:"mondayLimit"`
	TuesdayLimit   *int `json:"tuesdayLimit"`
	WednesdayLimit *int `json:"wednesdayLimit"`
	ThursdayLimit  *int `json:"thursdayLimit"`
	FridayLimit    *int `json:"fridayLimit"`
	SaturdayLimit  *int `json:"saturdayLimit"`
	SundayLimit    *int `json:"sundayLimit"`
	Overbook       *int `json:"overbook"`
}

type PatientHistoryUpdateInput struct {
	ID                  int     `json:"id"`
	ReviewOfSystemsNote *string `json:"reviewOfSystemsNote"`
}

type PatientInput struct {
	FirstName              string        `json:"firstName"`
	LastName               string        `json:"lastName"`
	Gender                 string        `json:"gender"`
	PhoneNo                string        `json:"phoneNo"`
	PhoneNo2               *string       `json:"phoneNo2"`
	HomePhone              *string       `json:"homePhone"`
	Email                  *string       `json:"email"`
	DateOfBirth            time.Time     `json:"dateOfBirth"`
	Credit                 *bool         `json:"credit"`
	CreditCompany          *string       `json:"creditCompany"`
	IDNo                   *string       `json:"idNo"`
	IDType                 *string       `json:"idType"`
	MartialStatus          *string       `json:"martialStatus"`
	Occupation             *string       `json:"occupation"`
	EmergencyContactName   *string       `json:"emergencyContactName"`
	EmergencyContactRel    *string       `json:"emergencyContactRel"`
	EmergencyContactPhone  *string       `json:"emergencyContactPhone"`
	EmergencyContactPhone2 *string       `json:"emergencyContactPhone2"`
	EmergencyContactMemo   *string       `json:"emergencyContactMemo"`
	Region                 string        `json:"region"`
	City                   *string       `json:"city"`
	SubCity                *string       `json:"subCity"`
	Woreda                 string        `json:"woreda"`
	Zone                   *string       `json:"zone"`
	Kebele                 *string       `json:"kebele"`
	HouseNo                *string       `json:"houseNo"`
	CardNo                 *string       `json:"cardNo"`
	PaperRecord            bool          `json:"paperRecord"`
	PaperRecordDocument    *FileUpload   `json:"paperRecordDocument"`
	Documents              []*FileUpload `json:"documents"`
	Memo                   *string       `json:"memo"`
}

type PatientInputV2 struct {
	FirstName              string        `json:"firstName"`
	LastName               string        `json:"lastName"`
	Gender                 string        `json:"gender"`
	PhoneNo                string        `json:"phoneNo"`
	PhoneNo2               *string       `json:"phoneNo2"`
	HomePhone              *string       `json:"homePhone"`
	Email                  *string       `json:"email"`
	Credit                 *bool         `json:"credit"`
	CreditCompany          *string       `json:"creditCompany"`
	IDNo                   *string       `json:"idNo"`
	IDType                 *string       `json:"idType"`
	MartialStatus          *string       `json:"martialStatus"`
	Occupation             *string       `json:"occupation"`
	EmergencyContactName   *string       `json:"emergencyContactName"`
	EmergencyContactRel    *string       `json:"emergencyContactRel"`
	EmergencyContactPhone  *string       `json:"emergencyContactPhone"`
	EmergencyContactPhone2 *string       `json:"emergencyContactPhone2"`
	EmergencyContactMemo   *string       `json:"emergencyContactMemo"`
	Region                 string        `json:"region"`
	City                   *string       `json:"city"`
	SubCity                *string       `json:"subCity"`
	Woreda                 string        `json:"woreda"`
	Zone                   *string       `json:"zone"`
	Kebele                 *string       `json:"kebele"`
	HouseNo                *string       `json:"houseNo"`
	CardNo                 *string       `json:"cardNo"`
	PaperRecord            bool          `json:"paperRecord"`
	PaperRecordDocument    *FileUpload   `json:"paperRecordDocument"`
	Documents              []*FileUpload `json:"documents"`
	Memo                   *string       `json:"memo"`
}

type PatientQueueInput struct {
	QueueName string           `json:"queueName"`
	Queue     []string         `json:"queue"`
	QueueType models.QueueType `json:"queueType"`
}

type PatientQueueWithAppointment struct {
	ID        int                   `json:"id"`
	QueueName string                `json:"queueName"`
	QueueType models.QueueType      `json:"queueType"`
	Queue     []*models.Appointment `json:"queue"`
}

type PatientUpdateInput struct {
	ID                     int           `json:"id"`
	FirstName              *string       `json:"firstName"`
	LastName               *string       `json:"lastName"`
	Gender                 *string       `json:"gender"`
	PhoneNo                *string       `json:"phoneNo"`
	PhoneNo2               *string       `json:"phoneNo2"`
	HomePhone              *string       `json:"homePhone"`
	Email                  *string       `json:"email"`
	Credit                 *bool         `json:"credit"`
	CreditCompany          *string       `json:"creditCompany"`
	DateOfBirth            *time.Time    `json:"dateOfBirth"`
	IDNo                   *string       `json:"idNo"`
	IDType                 *string       `json:"idType"`
	MartialStatus          *string       `json:"martialStatus"`
	Occupation             *string       `json:"occupation"`
	EmergencyContactName   *string       `json:"emergencyContactName"`
	EmergencyContactRel    *string       `json:"emergencyContactRel"`
	EmergencyContactPhone  *string       `json:"emergencyContactPhone"`
	EmergencyContactPhone2 *string       `json:"emergencyContactPhone2"`
	EmergencyContactMemo   *string       `json:"emergencyContactMemo"`
	Region                 *string       `json:"region"`
	City                   *string       `json:"city"`
	SubCity                *string       `json:"subCity"`
	Woreda                 *string       `json:"woreda"`
	Zone                   *string       `json:"zone"`
	Kebele                 *string       `json:"kebele"`
	HouseNo                *string       `json:"houseNo"`
	CardNo                 *string       `json:"cardNo"`
	PaperRecord            *bool         `json:"paperRecord"`
	PaperRecordDocument    *FileUpload   `json:"paperRecordDocument"`
	Documents              []*FileUpload `json:"documents"`
	Memo                   *string       `json:"memo"`
}

type PaymentConnection struct {
	TotalCount int            `json:"totalCount"`
	PageInfo   *PageInfo      `json:"pageInfo"`
	Edges      []*PaymentEdge `json:"edges"`
}

func (PaymentConnection) IsConnection() {}

type PaymentEdge struct {
	Node *models.Payment `json:"node"`
}

type PaymentInput struct {
	InvoiceNo string `json:"invoiceNo"`
	BillingID int    `json:"billingId"`
}

type PaymentUpdateInput struct {
	ID        int     `json:"id"`
	InvoiceNo *string `json:"invoiceNo"`
	BillingID *int    `json:"billingId"`
	Status    *string `json:"status"`
}

type PaymentWaiverConnection struct {
	TotalCount int                  `json:"totalCount"`
	PageInfo   *PageInfo            `json:"pageInfo"`
	Edges      []*PaymentWaiverEdge `json:"edges"`
}

func (PaymentWaiverConnection) IsConnection() {}

type PaymentWaiverEdge struct {
	Node *models.PaymentWaiver `json:"node"`
}

type PaymentWaiverInput struct {
	PaymentID int   `json:"paymentId"`
	PatientID int   `json:"patientId"`
	Approved  *bool `json:"approved"`
}

type PaymentWaiverUpdateInput struct {
	ID        int   `json:"id"`
	PaymentID *int  `json:"paymentId"`
	PatientID *int  `json:"patientId"`
	Approved  *bool `json:"approved"`
}

type PharmacyConnection struct {
	TotalCount int             `json:"totalCount"`
	PageInfo   *PageInfo       `json:"pageInfo"`
	Edges      []*PharmacyEdge `json:"edges"`
}

func (PharmacyConnection) IsConnection() {}

type PharmacyEdge struct {
	Node *models.Pharmacy `json:"node"`
}

type PharmacyInput struct {
	Title   string `json:"title"`
	Address string `json:"address"`
	Region  string `json:"region"`
	Country string `json:"country"`
	Phone   string `json:"phone"`
	InHouse bool   `json:"inHouse"`
	Active  bool   `json:"active"`
}

type PharmacyUpdateInput struct {
	ID      int     `json:"id"`
	Title   *string `json:"title"`
	Address *string `json:"address"`
	Region  *string `json:"region"`
	Country *string `json:"country"`
	Phone   *string `json:"phone"`
	InHouse *bool   `json:"inHouse"`
	Active  *bool   `json:"active"`
}

type PhysicalExamFindingConnection struct {
	TotalCount int                        `json:"totalCount"`
	PageInfo   *PageInfo                  `json:"pageInfo"`
	Edges      []*PhysicalExamFindingEdge `json:"edges"`
}

func (PhysicalExamFindingConnection) IsConnection() {}

type PhysicalExamFindingEdge struct {
	Node *models.PhysicalExamFinding `json:"node"`
}

type PhysicalExamFindingFilter struct {
	PatientChartID *int `json:"patientChartId"`
	ExamCategoryID *int `json:"examCategoryId"`
}

type PhysicalExamFindingInput struct {
	PatientChartID int     `json:"patientChartId"`
	ExamCategoryID int     `json:"examCategoryId"`
	Abnormal       bool    `json:"abnormal"`
	Note           *string `json:"note"`
}

type PhysicalExamFindingUpdateInput struct {
	ID             int     `json:"id"`
	PatientChartID *int    `json:"patientChartId"`
	ExamCategoryID *int    `json:"examCategoryId"`
	Abnormal       *bool   `json:"abnormal"`
	Note           *string `json:"note"`
}

type PrescriptionOrdersFilter struct {
	OrderedByID *int    `json:"orderedById"`
	Status      *string `json:"status"`
}

type ProgressNote struct {
	PatientHistory *models.PatientHistory `json:"patientHistory"`
	Appointments   []*models.Appointment  `json:"appointments"`
}

type ReferralConnection struct {
	TotalCount int             `json:"totalCount"`
	PageInfo   *PageInfo       `json:"pageInfo"`
	Edges      []*ReferralEdge `json:"edges"`
}

func (ReferralConnection) IsConnection() {}

type ReferralEdge struct {
	Node *models.Referral `json:"node"`
}

type ReferralFilter struct {
	ID        *int `json:"id"`
	PatientID *int `json:"patientId"`
}

type ReferralOrderConnection struct {
	TotalCount int                  `json:"totalCount"`
	PageInfo   *PageInfo            `json:"pageInfo"`
	Edges      []*ReferralOrderEdge `json:"edges"`
}

func (ReferralOrderConnection) IsConnection() {}

type ReferralOrderEdge struct {
	Node *models.ReferralOrder `json:"node"`
}

type ReferralOrderFilter struct {
	PatientChartID *int    `json:"patientChartId"`
	OrderedByID    *int    `json:"orderedById"`
	PatientID      *int    `json:"patientId"`
	Status         *string `json:"status"`
}

type ReviewOfSystemConnection struct {
	TotalCount int                   `json:"totalCount"`
	PageInfo   *PageInfo             `json:"pageInfo"`
	Edges      []*ReviewOfSystemEdge `json:"edges"`
}

func (ReviewOfSystemConnection) IsConnection() {}

type ReviewOfSystemEdge struct {
	Node *models.ReviewOfSystem `json:"node"`
}

type ReviewOfSystemFilter struct {
	PatientHistoryID *int `json:"patientHistoryId"`
	SystemSymptomID  *int `json:"systemSymptomId"`
}

type ReviewOfSystemInput struct {
	PatientHistoryID int     `json:"patientHistoryId"`
	SystemSymptomID  int     `json:"systemSymptomId"`
	Note             *string `json:"note"`
}

type ReviewOfSystemUpdateInput struct {
	ID               int     `json:"id"`
	PatientHistoryID *int    `json:"patientHistoryId"`
	SystemSymptomID  *int    `json:"systemSymptomId"`
	Note             *string `json:"note"`
}

type RoomConnection struct {
	TotalCount int         `json:"totalCount"`
	PageInfo   *PageInfo   `json:"pageInfo"`
	Edges      []*RoomEdge `json:"edges"`
}

func (RoomConnection) IsConnection() {}

type RoomEdge struct {
	Node *models.Room `json:"node"`
}

func (RoomEdge) IsEdge() {}

type RoomInput struct {
	Title string `json:"title"`
}

type RoomOrder struct {
	Field     string         `json:"field"`
	Direction OrderDirection `json:"direction"`
}

// Copyright 2021 Kidus Tiliksew
//
// This file is part of Tensor EMR.
//
// Tensor EMR is free software: you can redistribute it and/or modify
// it under the terms of the version 2 of GNU General Public License as published by
// the Free Software Foundation.
//
// Tensor EMR is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
type SearchResult struct {
	Patients  []*models.Patient `json:"patients"`
	Providers []*models.User    `json:"providers"`
}

type SimilarPatients struct {
	ByName  []*models.Patient `json:"byName"`
	ByPhone []*models.Patient `json:"byPhone"`
}

type SimilarPatientsInput struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	PhoneNo   string `json:"phoneNo"`
}

type SubscribeInput struct {
	UserID         int `json:"userId"`
	PatientQueueID int `json:"patientQueueId"`
}

type SupplyConnection struct {
	TotalCount int           `json:"totalCount"`
	PageInfo   *PageInfo     `json:"pageInfo"`
	Edges      []*SupplyEdge `json:"edges"`
}

func (SupplyConnection) IsConnection() {}

type SupplyEdge struct {
	Node *models.Supply `json:"node"`
}

type SupplyInput struct {
	Title      string `json:"title"`
	Active     bool   `json:"active"`
	BillingIds []*int `json:"billingIds"`
}

type SupplyUpdateInput struct {
	ID         int     `json:"id"`
	Title      *string `json:"title"`
	Active     *bool   `json:"active"`
	BillingIds []*int  `json:"billingIds"`
}

type SurgicalOrderConnection struct {
	TotalCount int                  `json:"totalCount"`
	PageInfo   *PageInfo            `json:"pageInfo"`
	Edges      []*SurgicalOrderEdge `json:"edges"`
}

func (SurgicalOrderConnection) IsConnection() {}

type SurgicalOrderEdge struct {
	Node *models.SurgicalOrder `json:"node"`
}

type SurgicalOrderFilter struct {
	PatientChartID *int    `json:"patientChartId"`
	OrderedByID    *int    `json:"orderedById"`
	PatientID      *int    `json:"patientId"`
	Status         *string `json:"status"`
}

type SurgicalProcedureConnection struct {
	TotalCount int                      `json:"totalCount"`
	PageInfo   *PageInfo                `json:"pageInfo"`
	Edges      []*SurgicalProcedureEdge `json:"edges"`
}

func (SurgicalProcedureConnection) IsConnection() {}

type SurgicalProcedureEdge struct {
	Node *models.SurgicalProcedure `json:"node"`
}

type SurgicalProcedureFilter struct {
	PatientChartID *int `json:"patientChartId"`
}

type SurgicalProcedureInput struct {
	PatientChartID                       int           `json:"patientChartId"`
	SurgicalOrderID                      *int          `json:"surgicalOrderId"`
	Respiratory                          *string       `json:"respiratory"`
	Cardiovascular                       *string       `json:"cardiovascular"`
	Abdomen                              *string       `json:"abdomen"`
	Gus                                  *string       `json:"gus"`
	Ismss                                *string       `json:"ismss"`
	Cns                                  *string       `json:"cns"`
	PreanestheticAllergies               *bool         `json:"preanestheticAllergies"`
	PreanestheticAllergiesNote           *string       `json:"preanestheticAllergiesNote"`
	PhysicalBloodPressure                *string       `json:"physicalBloodPressure"`
	PhysicalPr                           *string       `json:"physicalPr"`
	PhysicalRr                           *string       `json:"physicalRr"`
	PhysicalSaO2                         *string       `json:"physicalSaO2"`
	PhysicalTemperature                  *string       `json:"physicalTemperature"`
	PhysicalWeight                       *string       `json:"physicalWeight"`
	PhysicalHeent                        *string       `json:"physicalHeent"`
	PhysicalArtificalDenture             *bool         `json:"physicalArtificalDenture"`
	PhysicalArtificalDentureNote         *string       `json:"physicalArtificalDentureNote"`
	PhysicalLgs                          *string       `json:"physicalLgs"`
	PhysicalChest                        *string       `json:"physicalChest"`
	PhysicalCvs                          *string       `json:"physicalCvs"`
	PhysicalAbdomen                      *string       `json:"physicalAbdomen"`
	PhysicalGus                          *string       `json:"physicalGus"`
	PhysicalIs                           *string       `json:"physicalIs"`
	PhysicalMss                          *string       `json:"physicalMss"`
	PhysicalCns                          *string       `json:"physicalCns"`
	WbcActive                            *bool         `json:"wbcActive"`
	WbcResults                           *string       `json:"wbcResults"`
	WbcDate                              *time.Time    `json:"wbcDate"`
	HgbhctActive                         *bool         `json:"hgbhctActive"`
	HgbhctResults                        *string       `json:"hgbhctResults"`
	HgbhctDate                           *time.Time    `json:"hgbhctDate"`
	PltActive                            *bool         `json:"pltActive"`
	PltResults                           *string       `json:"pltResults"`
	PltDate                              *time.Time    `json:"pltDate"`
	CoagulationPtActive                  *bool         `json:"coagulationPtActive"`
	CoagulationPtResults                 *string       `json:"coagulationPtResults"`
	CoagulationPtDate                    *time.Time    `json:"coagulationPtDate"`
	CoagulationPttActive                 *bool         `json:"coagulationPttActive"`
	CoagulationPttResults                *string       `json:"coagulationPttResults"`
	CoagulationPttDate                   *time.Time    `json:"coagulationPttDate"`
	CoagulationInrActive                 *bool         `json:"coagulationInrActive"`
	CoagulationInrResults                *string       `json:"coagulationInrResults"`
	CoagulationInrDate                   *time.Time    `json:"coagulationInrDate"`
	SerumAlbuminActive                   *bool         `json:"serumAlbuminActive"`
	SerumAlbuminResults                  *string       `json:"serumAlbuminResults"`
	SerumAlbuminDate                     *time.Time    `json:"serumAlbuminDate"`
	TotalProteinActive                   *bool         `json:"totalProteinActive"`
	TotalProteinResults                  *string       `json:"totalProteinResults"`
	TotalProteinDate                     *time.Time    `json:"totalProteinDate"`
	BilirubinTotalActive                 *bool         `json:"bilirubinTotalActive"`
	BilirubinTotalResults                *string       `json:"bilirubinTotalResults"`
	BilirubinTotalDate                   *time.Time    `json:"bilirubinTotalDate"`
	BilirubinDirectActive                *bool         `json:"bilirubinDirectActive"`
	BilirubinDirectResults               *string       `json:"bilirubinDirectResults"`
	BilirubinDirectDate                  *time.Time    `json:"bilirubinDirectDate"`
	AstsgotActive                        *bool         `json:"astsgotActive"`
	AstsgotResults                       *string       `json:"astsgotResults"`
	AstsgotDate                          *time.Time    `json:"astsgotDate"`
	AltsgptActive                        *bool         `json:"altsgptActive"`
	AltsgptResults                       *string       `json:"altsgptResults"`
	AltsgptDate                          *time.Time    `json:"altsgptDate"`
	AlpActive                            *bool         `json:"alpActive"`
	AlpResults                           *string       `json:"alpResults"`
	AlpDate                              *time.Time    `json:"alpDate"`
	RenalCrActive                        *bool         `json:"renalCrActive"`
	RenalCrResults                       *string       `json:"renalCrResults"`
	RenalCrDate                          *time.Time    `json:"renalCrDate"`
	RenalBunActive                       *bool         `json:"renalBunActive"`
	RenalBunResults                      *string       `json:"renalBunResults"`
	RenalBunDate                         *time.Time    `json:"renalBunDate"`
	ThyroidFreeT3Active                  *bool         `json:"thyroidFreeT3Active"`
	ThyroidFreeT3Results                 *string       `json:"thyroidFreeT3Results"`
	ThyroidFreeT3Date                    *time.Time    `json:"thyroidFreeT3Date"`
	ThyroidTotalT4Active                 *bool         `json:"thyroidTotalT4Active"`
	ThyroidTotalT4Results                *string       `json:"thyroidTotalT4Results"`
	ThyroidTotalT4Date                   *time.Time    `json:"thyroidTotalT4Date"`
	ThyroidTshActive                     *bool         `json:"thyroidTshActive"`
	ThyroidTshResults                    *string       `json:"thyroidTshResults"`
	ThyroidTshDate                       *time.Time    `json:"thyroidTshDate"`
	ElectrolytesNaPlusActive             *bool         `json:"electrolytesNaPlusActive"`
	ElectrolytesNaPlusResults            *string       `json:"electrolytesNaPlusResults"`
	ElectrolytesNaPlusDate               *time.Time    `json:"electrolytesNaPlusDate"`
	ElectrolytesKPlusActive              *bool         `json:"electrolytesKPlusActive"`
	ElectrolytesKPlusResults             *string       `json:"electrolytesKPlusResults"`
	ElectrolytesKPlusDate                *time.Time    `json:"electrolytesKPlusDate"`
	ElectrolytesClMinusActive            *bool         `json:"electrolytesClMinusActive"`
	ElectrolytesClMinusResults           *string       `json:"electrolytesClMinusResults"`
	ElectrolytesClMinusDate              *time.Time    `json:"electrolytesClMinusDate"`
	ElectrolytesCa2PlusActive            *bool         `json:"electrolytesCa2PlusActive"`
	ElectrolytesCa2PlusResults           *string       `json:"electrolytesCa2PlusResults"`
	ElectrolytesCa2PlusDate              *time.Time    `json:"electrolytesCa2PlusDate"`
	ElectrolytesMg2PlusActive            *bool         `json:"electrolytesMg2PlusActive"`
	ElectrolytesMg2PlusResults           *string       `json:"electrolytesMg2PlusResults"`
	ElectrolytesMg2PlusDate              *time.Time    `json:"electrolytesMg2PlusDate"`
	ElectrolytesPMinusActive             *bool         `json:"electrolytesPMinusActive"`
	ElectrolytesPMinusResults            *string       `json:"electrolytesPMinusResults"`
	ElectrolytesPMinusDate               *time.Time    `json:"electrolytesPMinusDate"`
	Asa1                                 *bool         `json:"asa1"`
	Asa2                                 *bool         `json:"asa2"`
	Asa3                                 *bool         `json:"asa3"`
	Asa4                                 *bool         `json:"asa4"`
	Asa5                                 *bool         `json:"asa5"`
	Opv1                                 *bool         `json:"opv1"`
	Opv2                                 *bool         `json:"opv2"`
	Opv3                                 *bool         `json:"opv3"`
	Opv4                                 *bool         `json:"opv4"`
	BleedingTendancy                     *bool         `json:"bleedingTendancy"`
	BleedingTendancyNote                 *string       `json:"bleedingTendancyNote"`
	Dm                                   *bool         `json:"dm"`
	DmNote                               *string       `json:"dmNote"`
	Hypertension                         *bool         `json:"hypertension"`
	HypertensionNote                     *string       `json:"hypertensionNote"`
	Cardiac                              *bool         `json:"cardiac"`
	CardiacNote                          *string       `json:"cardiacNote"`
	PreanestheticAsthma                  *bool         `json:"preanestheticAsthma"`
	PreanestheticAsthmaNote              *string       `json:"preanestheticAsthmaNote"`
	Rvi                                  *bool         `json:"rvi"`
	RviNote                              *string       `json:"rviNote"`
	Renal                                *bool         `json:"renal"`
	RenalNote                            *string       `json:"renalNote"`
	FitForSurgery                        *bool         `json:"fitForSurgery"`
	FitForSurgeryNote                    *string       `json:"fitForSurgeryNote"`
	PreanestheticDocuments               []*FileUpload `json:"preanestheticDocuments"`
	RightCorrected                       *string       `json:"rightCorrected"`
	LeftCorrected                        *string       `json:"leftCorrected"`
	RightIop                             *string       `json:"rightIop"`
	LeftIop                              *string       `json:"leftIop"`
	RightAnteriorSegment                 *string       `json:"rightAnteriorSegment"`
	LeftAnteriorSegment                  *string       `json:"leftAnteriorSegment"`
	RightPosteriorSegment                *string       `json:"rightPosteriorSegment"`
	LeftPosteriorSegment                 *string       `json:"leftPosteriorSegment"`
	RightBiometry                        *string       `json:"rightBiometry"`
	LeftBiometry                         *string       `json:"leftBiometry"`
	Diabetes                             *string       `json:"diabetes"`
	Hpn                                  *string       `json:"hpn"`
	Asthma                               *string       `json:"asthma"`
	CardiacDisease                       *string       `json:"cardiacDisease"`
	Allergies                            *string       `json:"allergies"`
	BloodPressure                        *string       `json:"bloodPressure"`
	BloodSugar                           *string       `json:"bloodSugar"`
	URIAnalysis                          *string       `json:"uriAnalysis"`
	La                                   *bool         `json:"la"`
	Ga                                   *bool         `json:"ga"`
	Retrobulbar                          *bool         `json:"retrobulbar"`
	Peribulbar                           *bool         `json:"peribulbar"`
	Subtenones                           *bool         `json:"subtenones"`
	Topical                              *bool         `json:"topical"`
	ConjFlapLimbal                       *bool         `json:"conjFlapLimbal"`
	ConjFlapFornix                       *bool         `json:"conjFlapFornix"`
	SectionLimbal                        *bool         `json:"sectionLimbal"`
	SectionCorneral                      *bool         `json:"sectionCorneral"`
	SectionScleralTunnel                 *bool         `json:"sectionScleralTunnel"`
	CapsulotomyLinear                    *bool         `json:"capsulotomyLinear"`
	CapsulotomyCanOpener                 *bool         `json:"capsulotomyCanOpener"`
	CapsulotomyCcc                       *bool         `json:"capsulotomyCcc"`
	IolPlacementBag                      *bool         `json:"iolPlacementBag"`
	IolSulcus                            *bool         `json:"iolSulcus"`
	IolBagSulcus                         *bool         `json:"iolBagSulcus"`
	IrodectpmyNone                       *bool         `json:"irodectpmyNone"`
	IrodectpmyPl                         *bool         `json:"irodectpmyPl"`
	IrodectpmySl                         *bool         `json:"irodectpmySl"`
	Sphincterectomy                      *bool         `json:"sphincterectomy"`
	LensExtractionIcce                   *bool         `json:"lensExtractionIcce"`
	LensExtractionEcce                   *bool         `json:"lensExtractionEcce"`
	LensExtractionPhaco                  *bool         `json:"lensExtractionPhaco"`
	SutureNone                           *bool         `json:"sutureNone"`
	SutureContinuous                     *bool         `json:"sutureContinuous"`
	SutureInterrupted                    *bool         `json:"sutureInterrupted"`
	Drapes                               *bool         `json:"drapes"`
	Ringer                               *bool         `json:"ringer"`
	Bss                                  *bool         `json:"bss"`
	Air                                  *bool         `json:"air"`
	Hpmc                                 *bool         `json:"hpmc"`
	Healon                               *bool         `json:"healon"`
	Pilo                                 *bool         `json:"pilo"`
	Adrenalin                            *bool         `json:"adrenalin"`
	Antibiotic                           *bool         `json:"antibiotic"`
	Steroid                              *bool         `json:"steroid"`
	Suture80                             *bool         `json:"suture80"`
	Suture90                             *bool         `json:"suture90"`
	Suture100                            *bool         `json:"suture100"`
	IrrigatingSolution                   *string       `json:"irrigatingSolution"`
	Visco                                *string       `json:"visco"`
	Interacameral                        *string       `json:"interacameral"`
	Subconj                              *string       `json:"subconj"`
	Suture                               *string       `json:"suture"`
	Silk                                 *bool         `json:"silk"`
	Nylon                                *bool         `json:"nylon"`
	PcTear                               *bool         `json:"pcTear"`
	VitreousLoss                         *bool         `json:"vitreousLoss"`
	DescematesStrip                      *bool         `json:"descematesStrip"`
	EndothelialDamage                    *bool         `json:"endothelialDamage"`
	NucluesDrop                          *bool         `json:"nucluesDrop"`
	IridoDialysis                        *bool         `json:"iridoDialysis"`
	IrisDamage                           *bool         `json:"irisDamage"`
	RetainedCortex                       *bool         `json:"retainedCortex"`
	Hyphema                              *bool         `json:"hyphema"`
	ComplicationsOthers                  *string       `json:"complicationsOthers"`
	ComplicationsNote                    *string       `json:"complicationsNote"`
	Vitrectomy                           *string       `json:"vitrectomy"`
	TypeOfIolAc                          *bool         `json:"typeOfIolAc"`
	TypeOfIolPc                          *bool         `json:"typeOfIolPc"`
	TypeOfIol                            *string       `json:"typeOfIol"`
	IolModel                             *string       `json:"iolModel"`
	Company                              *string       `json:"company"`
	Aclol                                *string       `json:"aclol"`
	AclolPlanned                         *bool         `json:"aclolPlanned"`
	AclolUnplanned                       *bool         `json:"aclolUnplanned"`
	Unplanned                            *string       `json:"unplanned"`
	TwentyG                              *bool         `json:"twentyG"`
	TwentyThreeG                         *bool         `json:"twentyThreeG"`
	TwentyFiveG                          *bool         `json:"twentyFiveG"`
	Tca                                  *bool         `json:"tca"`
	BrilliantBlue                        *bool         `json:"brilliantBlue"`
	Ilmp                                 *bool         `json:"ilmp"`
	MembranePeeling                      *bool         `json:"membranePeeling"`
	MembraneSegmentation                 *bool         `json:"membraneSegmentation"`
	MembraneDeliniation                  *bool         `json:"membraneDeliniation"`
	Retinotomy                           *bool         `json:"retinotomy"`
	Retinectomy                          *bool         `json:"retinectomy"`
	Fax                                  *bool         `json:"fax"`
	Pfcl                                 *bool         `json:"pfcl"`
	SiliconOilInjection                  *bool         `json:"siliconOilInjection"`
	SiliconOilExchange                   *bool         `json:"siliconOilExchange"`
	SiliconOilPfclExchange               *bool         `json:"siliconOilPfclExchange"`
	SiliconOilOneThousandCsk             *bool         `json:"siliconOilOneThousandCsk"`
	SiliconOilFiveThousandCsk            *bool         `json:"siliconOilFiveThousandCsk"`
	Endolaser                            *bool         `json:"endolaser"`
	AtBreaks                             *bool         `json:"atBreaks"`
	ThreeSixyDegree                      *bool         `json:"threeSixyDegree"`
	Prp                                  *bool         `json:"prp"`
	CryopexyAtBreaks                     *bool         `json:"cryopexyAtBreaks"`
	Endodiathermy                        *bool         `json:"endodiathermy"`
	EncirclingBand                       *bool         `json:"encirclingBand"`
	SclerotomyStitches                   *bool         `json:"sclerotomyStitches"`
	ComplicationChrodialEffusion         *bool         `json:"complicationChrodialEffusion"`
	ComplicationIntraocilarHemorrhage    *bool         `json:"complicationIntraocilarHemorrhage"`
	ComplicationSuprachorodialHemorrhage *bool         `json:"complicationSuprachorodialHemorrhage"`
	ComplicationIatrogenicBreaks         *bool         `json:"complicationIatrogenicBreaks"`
	ComplicationRetinalDetachment        *bool         `json:"complicationRetinalDetachment"`
	ComplicationLensTouch                *bool         `json:"complicationLensTouch"`
	ComplicationPfcl                     *bool         `json:"complicationPfcl"`
	ComplicationSubretialPfcl            *bool         `json:"complicationSubretialPfcl"`
	ComplicationSubretialOil             *bool         `json:"complicationSubretialOil"`
	ComplicationMacularFold              *bool         `json:"complicationMacularFold"`
	AdditionalNotes                      *string       `json:"additionalNotes"`
	SpecialInstructions                  *string       `json:"specialInstructions"`
	Treatment                            *string       `json:"treatment"`
	AssistantName                        *string       `json:"assistantName"`
	PerformOnEye                         *string       `json:"performOnEye"`
}

type SurgicalProcedureTypeConnection struct {
	TotalCount int                          `json:"totalCount"`
	PageInfo   *PageInfo                    `json:"pageInfo"`
	Edges      []*SurgicalProcedureTypeEdge `json:"edges"`
}

func (SurgicalProcedureTypeConnection) IsConnection() {}

type SurgicalProcedureTypeEdge struct {
	Node *models.SurgicalProcedureType `json:"node"`
}

type SurgicalProcedureTypeInput struct {
	Title      string `json:"title"`
	Active     bool   `json:"active"`
	BillingIds []*int `json:"billingIds"`
	SupplyIds  []*int `json:"supplyIds"`
}

type SurgicalProcedureTypeUpdateInput struct {
	ID         int     `json:"id"`
	Title      *string `json:"title"`
	Active     *bool   `json:"active"`
	BillingIds []*int  `json:"billingIds"`
	SupplyIds  []*int  `json:"supplyIds"`
}

type SurgicalProcedureUpdateInput struct {
	ID                                   int           `json:"id"`
	Respiratory                          *string       `json:"respiratory"`
	Cardiovascular                       *string       `json:"cardiovascular"`
	Abdomen                              *string       `json:"abdomen"`
	Gus                                  *string       `json:"gus"`
	Ismss                                *string       `json:"ismss"`
	Cns                                  *string       `json:"cns"`
	PreanestheticAllergies               *bool         `json:"preanestheticAllergies"`
	PreanestheticAllergiesNote           *string       `json:"preanestheticAllergiesNote"`
	PhysicalBloodPressure                *string       `json:"physicalBloodPressure"`
	PhysicalPr                           *string       `json:"physicalPr"`
	PhysicalRr                           *string       `json:"physicalRr"`
	PhysicalSaO2                         *string       `json:"physicalSaO2"`
	PhysicalTemperature                  *string       `json:"physicalTemperature"`
	PhysicalWeight                       *string       `json:"physicalWeight"`
	PhysicalHeent                        *string       `json:"physicalHeent"`
	PhysicalArtificalDenture             *bool         `json:"physicalArtificalDenture"`
	PhysicalArtificalDentureNote         *string       `json:"physicalArtificalDentureNote"`
	PhysicalLgs                          *string       `json:"physicalLgs"`
	PhysicalChest                        *string       `json:"physicalChest"`
	PhysicalCvs                          *string       `json:"physicalCvs"`
	PhysicalAbdomen                      *string       `json:"physicalAbdomen"`
	PhysicalGus                          *string       `json:"physicalGus"`
	PhysicalIs                           *string       `json:"physicalIs"`
	PhysicalMss                          *string       `json:"physicalMss"`
	PhysicalCns                          *string       `json:"physicalCns"`
	WbcActive                            *bool         `json:"wbcActive"`
	WbcResults                           *string       `json:"wbcResults"`
	WbcDate                              *time.Time    `json:"wbcDate"`
	HgbhctActive                         *bool         `json:"hgbhctActive"`
	HgbhctResults                        *string       `json:"hgbhctResults"`
	HgbhctDate                           *time.Time    `json:"hgbhctDate"`
	PltActive                            *bool         `json:"pltActive"`
	PltResults                           *string       `json:"pltResults"`
	PltDate                              *time.Time    `json:"pltDate"`
	CoagulationPtActive                  *bool         `json:"coagulationPtActive"`
	CoagulationPtResults                 *string       `json:"coagulationPtResults"`
	CoagulationPtDate                    *time.Time    `json:"coagulationPtDate"`
	CoagulationPttActive                 *bool         `json:"coagulationPttActive"`
	CoagulationPttResults                *string       `json:"coagulationPttResults"`
	CoagulationPttDate                   *time.Time    `json:"coagulationPttDate"`
	CoagulationInrActive                 *bool         `json:"coagulationInrActive"`
	CoagulationInrResults                *string       `json:"coagulationInrResults"`
	CoagulationInrDate                   *time.Time    `json:"coagulationInrDate"`
	SerumAlbuminActive                   *bool         `json:"serumAlbuminActive"`
	SerumAlbuminResults                  *string       `json:"serumAlbuminResults"`
	SerumAlbuminDate                     *time.Time    `json:"serumAlbuminDate"`
	TotalProteinActive                   *bool         `json:"totalProteinActive"`
	TotalProteinResults                  *string       `json:"totalProteinResults"`
	TotalProteinDate                     *time.Time    `json:"totalProteinDate"`
	BilirubinTotalActive                 *bool         `json:"bilirubinTotalActive"`
	BilirubinTotalResults                *string       `json:"bilirubinTotalResults"`
	BilirubinTotalDate                   *time.Time    `json:"bilirubinTotalDate"`
	BilirubinDirectActive                *bool         `json:"bilirubinDirectActive"`
	BilirubinDirectResults               *string       `json:"bilirubinDirectResults"`
	BilirubinDirectDate                  *time.Time    `json:"bilirubinDirectDate"`
	AstsgotActive                        *bool         `json:"astsgotActive"`
	AstsgotResults                       *string       `json:"astsgotResults"`
	AstsgotDate                          *time.Time    `json:"astsgotDate"`
	AltsgptActive                        *bool         `json:"altsgptActive"`
	AltsgptResults                       *string       `json:"altsgptResults"`
	AltsgptDate                          *time.Time    `json:"altsgptDate"`
	AlpActive                            *bool         `json:"alpActive"`
	AlpResults                           *string       `json:"alpResults"`
	AlpDate                              *time.Time    `json:"alpDate"`
	RenalCrActive                        *bool         `json:"renalCrActive"`
	RenalCrResults                       *string       `json:"renalCrResults"`
	RenalCrDate                          *time.Time    `json:"renalCrDate"`
	RenalBunActive                       *bool         `json:"renalBunActive"`
	RenalBunResults                      *string       `json:"renalBunResults"`
	RenalBunDate                         *time.Time    `json:"renalBunDate"`
	ThyroidFreeT3Active                  *bool         `json:"thyroidFreeT3Active"`
	ThyroidFreeT3Results                 *string       `json:"thyroidFreeT3Results"`
	ThyroidFreeT3Date                    *time.Time    `json:"thyroidFreeT3Date"`
	ThyroidTotalT4Active                 *bool         `json:"thyroidTotalT4Active"`
	ThyroidTotalT4Results                *string       `json:"thyroidTotalT4Results"`
	ThyroidTotalT4Date                   *time.Time    `json:"thyroidTotalT4Date"`
	ThyroidTshActive                     *bool         `json:"thyroidTshActive"`
	ThyroidTshResults                    *string       `json:"thyroidTshResults"`
	ThyroidTshDate                       *time.Time    `json:"thyroidTshDate"`
	ElectrolytesNaPlusActive             *bool         `json:"electrolytesNaPlusActive"`
	ElectrolytesNaPlusResults            *string       `json:"electrolytesNaPlusResults"`
	ElectrolytesNaPlusDate               *time.Time    `json:"electrolytesNaPlusDate"`
	ElectrolytesKPlusActive              *bool         `json:"electrolytesKPlusActive"`
	ElectrolytesKPlusResults             *string       `json:"electrolytesKPlusResults"`
	ElectrolytesKPlusDate                *time.Time    `json:"electrolytesKPlusDate"`
	ElectrolytesClMinusActive            *bool         `json:"electrolytesClMinusActive"`
	ElectrolytesClMinusResults           *string       `json:"electrolytesClMinusResults"`
	ElectrolytesClMinusDate              *time.Time    `json:"electrolytesClMinusDate"`
	ElectrolytesCa2PlusActive            *bool         `json:"electrolytesCa2PlusActive"`
	ElectrolytesCa2PlusResults           *string       `json:"electrolytesCa2PlusResults"`
	ElectrolytesCa2PlusDate              *time.Time    `json:"electrolytesCa2PlusDate"`
	ElectrolytesMg2PlusActive            *bool         `json:"electrolytesMg2PlusActive"`
	ElectrolytesMg2PlusResults           *string       `json:"electrolytesMg2PlusResults"`
	ElectrolytesMg2PlusDate              *time.Time    `json:"electrolytesMg2PlusDate"`
	ElectrolytesPMinusActive             *bool         `json:"electrolytesPMinusActive"`
	ElectrolytesPMinusResults            *string       `json:"electrolytesPMinusResults"`
	ElectrolytesPMinusDate               *time.Time    `json:"electrolytesPMinusDate"`
	Asa1                                 *bool         `json:"asa1"`
	Asa2                                 *bool         `json:"asa2"`
	Asa3                                 *bool         `json:"asa3"`
	Asa4                                 *bool         `json:"asa4"`
	Asa5                                 *bool         `json:"asa5"`
	Opv1                                 *bool         `json:"opv1"`
	Opv2                                 *bool         `json:"opv2"`
	Opv3                                 *bool         `json:"opv3"`
	Opv4                                 *bool         `json:"opv4"`
	BleedingTendancy                     *bool         `json:"bleedingTendancy"`
	BleedingTendancyNote                 *string       `json:"bleedingTendancyNote"`
	Dm                                   *bool         `json:"dm"`
	DmNote                               *string       `json:"dmNote"`
	Hypertension                         *bool         `json:"hypertension"`
	HypertensionNote                     *string       `json:"hypertensionNote"`
	Cardiac                              *bool         `json:"cardiac"`
	CardiacNote                          *string       `json:"cardiacNote"`
	PreanestheticAsthma                  *bool         `json:"preanestheticAsthma"`
	PreanestheticAsthmaNote              *string       `json:"preanestheticAsthmaNote"`
	Rvi                                  *bool         `json:"rvi"`
	RviNote                              *string       `json:"rviNote"`
	Renal                                *bool         `json:"renal"`
	RenalNote                            *string       `json:"renalNote"`
	FitForSurgery                        *bool         `json:"fitForSurgery"`
	FitForSurgeryNote                    *string       `json:"fitForSurgeryNote"`
	PreanestheticDocuments               []*FileUpload `json:"preanestheticDocuments"`
	RightCorrected                       *string       `json:"rightCorrected"`
	LeftCorrected                        *string       `json:"leftCorrected"`
	RightIop                             *string       `json:"rightIop"`
	LeftIop                              *string       `json:"leftIop"`
	RightAnteriorSegment                 *string       `json:"rightAnteriorSegment"`
	LeftAnteriorSegment                  *string       `json:"leftAnteriorSegment"`
	RightPosteriorSegment                *string       `json:"rightPosteriorSegment"`
	LeftPosteriorSegment                 *string       `json:"leftPosteriorSegment"`
	RightBiometry                        *string       `json:"rightBiometry"`
	LeftBiometry                         *string       `json:"leftBiometry"`
	Diabetes                             *string       `json:"diabetes"`
	Hpn                                  *string       `json:"hpn"`
	Asthma                               *string       `json:"asthma"`
	CardiacDisease                       *string       `json:"cardiacDisease"`
	Allergies                            *string       `json:"allergies"`
	BloodPressure                        *string       `json:"bloodPressure"`
	BloodSugar                           *string       `json:"bloodSugar"`
	URIAnalysis                          *string       `json:"uriAnalysis"`
	La                                   *bool         `json:"la"`
	Ga                                   *bool         `json:"ga"`
	Retrobulbar                          *bool         `json:"retrobulbar"`
	Peribulbar                           *bool         `json:"peribulbar"`
	Subtenones                           *bool         `json:"subtenones"`
	Topical                              *bool         `json:"topical"`
	ConjFlapLimbal                       *bool         `json:"conjFlapLimbal"`
	ConjFlapFornix                       *bool         `json:"conjFlapFornix"`
	SectionLimbal                        *bool         `json:"sectionLimbal"`
	SectionCorneral                      *bool         `json:"sectionCorneral"`
	SectionScleralTunnel                 *bool         `json:"sectionScleralTunnel"`
	CapsulotomyLinear                    *bool         `json:"capsulotomyLinear"`
	CapsulotomyCanOpener                 *bool         `json:"capsulotomyCanOpener"`
	CapsulotomyCcc                       *bool         `json:"capsulotomyCcc"`
	IolPlacementBag                      *bool         `json:"iolPlacementBag"`
	IolSulcus                            *bool         `json:"iolSulcus"`
	IolBagSulcus                         *bool         `json:"iolBagSulcus"`
	IrodectpmyNone                       *bool         `json:"irodectpmyNone"`
	IrodectpmyPl                         *bool         `json:"irodectpmyPl"`
	IrodectpmySl                         *bool         `json:"irodectpmySl"`
	Sphincterectomy                      *bool         `json:"sphincterectomy"`
	LensExtractionIcce                   *bool         `json:"lensExtractionIcce"`
	LensExtractionEcce                   *bool         `json:"lensExtractionEcce"`
	LensExtractionPhaco                  *bool         `json:"lensExtractionPhaco"`
	SutureNone                           *bool         `json:"sutureNone"`
	SutureContinuous                     *bool         `json:"sutureContinuous"`
	SutureInterrupted                    *bool         `json:"sutureInterrupted"`
	Drapes                               *bool         `json:"drapes"`
	Ringer                               *bool         `json:"ringer"`
	Bss                                  *bool         `json:"bss"`
	Air                                  *bool         `json:"air"`
	Hpmc                                 *bool         `json:"hpmc"`
	Healon                               *bool         `json:"healon"`
	Pilo                                 *bool         `json:"pilo"`
	Adrenalin                            *bool         `json:"adrenalin"`
	Antibiotic                           *bool         `json:"antibiotic"`
	Steroid                              *bool         `json:"steroid"`
	Suture80                             *bool         `json:"suture80"`
	Suture90                             *bool         `json:"suture90"`
	Suture100                            *bool         `json:"suture100"`
	IrrigatingSolution                   *string       `json:"irrigatingSolution"`
	Visco                                *string       `json:"visco"`
	Interacameral                        *string       `json:"interacameral"`
	Subconj                              *string       `json:"subconj"`
	Suture                               *string       `json:"suture"`
	Silk                                 *bool         `json:"silk"`
	Nylon                                *bool         `json:"nylon"`
	PcTear                               *bool         `json:"pcTear"`
	VitreousLoss                         *bool         `json:"vitreousLoss"`
	DescematesStrip                      *bool         `json:"descematesStrip"`
	EndothelialDamage                    *bool         `json:"endothelialDamage"`
	NucluesDrop                          *bool         `json:"nucluesDrop"`
	IridoDialysis                        *bool         `json:"iridoDialysis"`
	IrisDamage                           *bool         `json:"irisDamage"`
	RetainedCortex                       *bool         `json:"retainedCortex"`
	Hyphema                              *bool         `json:"hyphema"`
	ComplicationsOthers                  *string       `json:"complicationsOthers"`
	ComplicationsNote                    *string       `json:"complicationsNote"`
	Vitrectomy                           *string       `json:"vitrectomy"`
	TypeOfIolAc                          *bool         `json:"typeOfIolAc"`
	TypeOfIolPc                          *bool         `json:"typeOfIolPc"`
	TypeOfIol                            *string       `json:"typeOfIol"`
	IolModel                             *string       `json:"iolModel"`
	Company                              *string       `json:"company"`
	Aclol                                *string       `json:"aclol"`
	AclolPlanned                         *bool         `json:"aclolPlanned"`
	AclolUnplanned                       *bool         `json:"aclolUnplanned"`
	Unplanned                            *string       `json:"unplanned"`
	TwentyG                              *bool         `json:"twentyG"`
	TwentyThreeG                         *bool         `json:"twentyThreeG"`
	TwentyFiveG                          *bool         `json:"twentyFiveG"`
	Tca                                  *bool         `json:"tca"`
	BrilliantBlue                        *bool         `json:"brilliantBlue"`
	Ilmp                                 *bool         `json:"ilmp"`
	MembranePeeling                      *bool         `json:"membranePeeling"`
	MembraneSegmentation                 *bool         `json:"membraneSegmentation"`
	MembraneDeliniation                  *bool         `json:"membraneDeliniation"`
	Retinotomy                           *bool         `json:"retinotomy"`
	Retinectomy                          *bool         `json:"retinectomy"`
	Fax                                  *bool         `json:"fax"`
	Pfcl                                 *bool         `json:"pfcl"`
	SiliconOilInjection                  *bool         `json:"siliconOilInjection"`
	SiliconOilExchange                   *bool         `json:"siliconOilExchange"`
	SiliconOilPfclExchange               *bool         `json:"siliconOilPfclExchange"`
	SiliconOilOneThousandCsk             *bool         `json:"siliconOilOneThousandCsk"`
	SiliconOilFiveThousandCsk            *bool         `json:"siliconOilFiveThousandCsk"`
	Endolaser                            *bool         `json:"endolaser"`
	AtBreaks                             *bool         `json:"atBreaks"`
	ThreeSixyDegree                      *bool         `json:"threeSixyDegree"`
	Prp                                  *bool         `json:"prp"`
	CryopexyAtBreaks                     *bool         `json:"cryopexyAtBreaks"`
	Endodiathermy                        *bool         `json:"endodiathermy"`
	EncirclingBand                       *bool         `json:"encirclingBand"`
	SclerotomyStitches                   *bool         `json:"sclerotomyStitches"`
	ComplicationChrodialEffusion         *bool         `json:"complicationChrodialEffusion"`
	ComplicationIntraocilarHemorrhage    *bool         `json:"complicationIntraocilarHemorrhage"`
	ComplicationSuprachorodialHemorrhage *bool         `json:"complicationSuprachorodialHemorrhage"`
	ComplicationIatrogenicBreaks         *bool         `json:"complicationIatrogenicBreaks"`
	ComplicationRetinalDetachment        *bool         `json:"complicationRetinalDetachment"`
	ComplicationLensTouch                *bool         `json:"complicationLensTouch"`
	ComplicationPfcl                     *bool         `json:"complicationPfcl"`
	ComplicationSubretialPfcl            *bool         `json:"complicationSubretialPfcl"`
	ComplicationSubretialOil             *bool         `json:"complicationSubretialOil"`
	ComplicationMacularFold              *bool         `json:"complicationMacularFold"`
	AdditionalNotes                      *string       `json:"additionalNotes"`
	SpecialInstructions                  *string       `json:"specialInstructions"`
	Treatment                            *string       `json:"treatment"`
	AssistantName                        *string       `json:"assistantName"`
	PerformOnEye                         *string       `json:"performOnEye"`
}

type SystemConnection struct {
	TotalCount int           `json:"totalCount"`
	PageInfo   *PageInfo     `json:"pageInfo"`
	Edges      []*SystemEdge `json:"edges"`
}

func (SystemConnection) IsConnection() {}

type SystemEdge struct {
	Node *models.System `json:"node"`
}

type SystemInput struct {
	Title string `json:"title"`
}

type SystemSymptomConnection struct {
	TotalCount int                  `json:"totalCount"`
	PageInfo   *PageInfo            `json:"pageInfo"`
	Edges      []*SystemSymptomEdge `json:"edges"`
}

func (SystemSymptomConnection) IsConnection() {}

type SystemSymptomEdge struct {
	Node *models.SystemSymptom `json:"node"`
}

type SystemSymptomInput struct {
	Title    string `json:"title"`
	SystemID int    `json:"systemId"`
}

type SystemSymptomUpdateInput struct {
	ID       int     `json:"id"`
	Title    *string `json:"title"`
	SystemID *int    `json:"systemId"`
}

type SystemUpdateInput struct {
	ID    int     `json:"id"`
	Title *string `json:"title"`
}

type Todo struct {
	ID   int    `json:"id"`
	Text string `json:"text"`
	Done bool   `json:"done"`
}

type TreatmentConnection struct {
	TotalCount int              `json:"totalCount"`
	PageInfo   *PageInfo        `json:"pageInfo"`
	Edges      []*TreatmentEdge `json:"edges"`
}

func (TreatmentConnection) IsConnection() {}

type TreatmentEdge struct {
	Node *models.Treatment `json:"node"`
}

type TreatmentFilter struct {
	PatientChartID *int `json:"patientChartId"`
}

type TreatmentInput struct {
	PatientChartID int     `json:"patientChartId"`
	Note           *string `json:"note"`
	Result         *string `json:"result"`
	RightEyeText   *string `json:"rightEyeText"`
	LeftEyeText    *string `json:"leftEyeText"`
	GeneralText    *string `json:"generalText"`
}

type TreatmentOrderConnection struct {
	TotalCount int                   `json:"totalCount"`
	PageInfo   *PageInfo             `json:"pageInfo"`
	Edges      []*TreatmentOrderEdge `json:"edges"`
}

func (TreatmentOrderConnection) IsConnection() {}

type TreatmentOrderEdge struct {
	Node *models.TreatmentOrder `json:"node"`
}

type TreatmentOrderFilter struct {
	PatientChartID *int    `json:"patientChartId"`
	OrderedByID    *int    `json:"orderedById"`
	PatientID      *int    `json:"patientId"`
	Status         *string `json:"status"`
}

type TreatmentTypeConnection struct {
	TotalCount int                  `json:"totalCount"`
	PageInfo   *PageInfo            `json:"pageInfo"`
	Edges      []*TreatmentTypeEdge `json:"edges"`
}

func (TreatmentTypeConnection) IsConnection() {}

type TreatmentTypeEdge struct {
	Node *models.TreatmentType `json:"node"`
}

type TreatmentTypeInput struct {
	Title      string `json:"title"`
	Active     bool   `json:"active"`
	BillingIds []*int `json:"billingIds"`
	SupplyIds  []*int `json:"supplyIds"`
}

type TreatmentTypeUpdateInput struct {
	ID         int     `json:"id"`
	Title      *string `json:"title"`
	Active     *bool   `json:"active"`
	BillingIds []*int  `json:"billingIds"`
	SupplyIds  []*int  `json:"supplyIds"`
}

type TreatmentUpdateInput struct {
	ID           int     `json:"id"`
	Note         *string `json:"note"`
	Result       *string `json:"result"`
	RightEyeText *string `json:"rightEyeText"`
	LeftEyeText  *string `json:"leftEyeText"`
	GeneralText  *string `json:"generalText"`
}

type UserConnection struct {
	TotalCount int         `json:"totalCount"`
	PageInfo   *PageInfo   `json:"pageInfo"`
	Edges      []*UserEdge `json:"edges"`
}

func (UserConnection) IsConnection() {}

type UserEdge struct {
	Node *models.User `json:"node"`
}

type UserFilter struct {
	ID        *int   `json:"id"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Email     string `json:"email"`
}

type UserInput struct {
	FirstName       string      `json:"firstName"`
	LastName        string      `json:"lastName"`
	Email           string      `json:"email"`
	Password        string      `json:"password"`
	ConfirmPassword string      `json:"confirmPassword"`
	UserTypeIds     []*int      `json:"userTypeIds"`
	Signature       *FileUpload `json:"signature"`
	ProfilePic      *FileUpload `json:"profilePic"`
	Active          *bool       `json:"active"`
}

type UserSearchInput struct {
	SearchTerm *string `json:"searchTerm"`
}

type UserTypeConnection struct {
	TotalCount int             `json:"totalCount"`
	PageInfo   *PageInfo       `json:"pageInfo"`
	Edges      []*UserTypeEdge `json:"edges"`
}

func (UserTypeConnection) IsConnection() {}

type UserTypeEdge struct {
	Node *models.UserType `json:"node"`
}

type UserTypeInput struct {
	Title string `json:"title"`
}

type UserTypeUpdateInput struct {
	ID    int    `json:"id"`
	Title string `json:"title"`
}

type UserUpdateInput struct {
	ID          int         `json:"id"`
	FirstName   string      `json:"firstName"`
	LastName    string      `json:"lastName"`
	Email       string      `json:"email"`
	UserTypeIds []*int      `json:"userTypeIds"`
	Active      *bool       `json:"active"`
	Signature   *FileUpload `json:"signature"`
	ProfilePic  *FileUpload `json:"profilePic"`
}

type VisitTypeConnection struct {
	TotalCount int              `json:"totalCount"`
	PageInfo   *PageInfo        `json:"pageInfo"`
	Edges      []*VisitTypeEdge `json:"edges"`
}

func (VisitTypeConnection) IsConnection() {}

type VisitTypeEdge struct {
	Node *models.VisitType `json:"node"`
}

type VisitTypeInput struct {
	Title *string `json:"title"`
}

type VisitTypeOrder struct {
	Field     string         `json:"field"`
	Direction OrderDirection `json:"direction"`
}

type VitalSignsFilter struct {
	ID             *int `json:"id"`
	PatientChartID *int `json:"patientChartId"`
}

type VitalSignsInput struct {
	PatientChartID           int      `json:"patientChartId"`
	Temperature              *float64 `json:"temperature"`
	Pulse                    *float64 `json:"pulse"`
	BloodPressureSystolic    *float64 `json:"bloodPressureSystolic"`
	BloodPressureDiastolic   *float64 `json:"bloodPressureDiastolic"`
	RespiratoryRate          *float64 `json:"respiratoryRate"`
	OxygenSaturation         *float64 `json:"oxygenSaturation"`
	Height                   *float64 `json:"height"`
	Weight                   *float64 `json:"weight"`
	Bmi                      *float64 `json:"bmi"`
	RightDistanceUncorrected *string  `json:"rightDistanceUncorrected"`
	LeftDistanceUncorrected  *string  `json:"leftDistanceUncorrected"`
	RightDistancePinhole     *string  `json:"rightDistancePinhole"`
	LeftDistancePinhole      *string  `json:"leftDistancePinhole"`
	RightDistanceCorrected   *string  `json:"rightDistanceCorrected"`
	LeftDistanceCorrected    *string  `json:"leftDistanceCorrected"`
	RightNearUncorrected     *string  `json:"rightNearUncorrected"`
	LeftNearUncorrected      *string  `json:"leftNearUncorrected"`
	RightNearPinhole         *string  `json:"rightNearPinhole"`
	LeftNearPinhole          *string  `json:"leftNearPinhole"`
	RightNearCorrected       *string  `json:"rightNearCorrected"`
	LeftNearCorrected        *string  `json:"leftNearCorrected"`
	RightApplanation         *string  `json:"rightApplanation"`
	LeftApplanation          *string  `json:"leftApplanation"`
	RightTonopen             *string  `json:"rightTonopen"`
	LeftTonopen              *string  `json:"leftTonopen"`
	RightDigital             *string  `json:"rightDigital"`
	LeftDigital              *string  `json:"leftDigital"`
	RightNoncontact          *string  `json:"rightNoncontact"`
	LeftNoncontact           *string  `json:"leftNoncontact"`
	RightDistanceSph         *string  `json:"rightDistanceSph"`
	LeftDistanceSph          *string  `json:"leftDistanceSph"`
	RightDistanceAxis        *string  `json:"rightDistanceAxis"`
	LeftDistanceAxis         *string  `json:"leftDistanceAxis"`
	RightDistanceCyl         *string  `json:"rightDistanceCyl"`
	LeftDistanceCyl          *string  `json:"leftDistanceCyl"`
	RightNearSph             *string  `json:"rightNearSph"`
	LeftNearSph              *string  `json:"leftNearSph"`
	RightNearCyl             *string  `json:"rightNearCyl"`
	LeftNearCyl              *string  `json:"leftNearCyl"`
	RightNearAxis            *string  `json:"rightNearAxis"`
	LeftNearAxis             *string  `json:"leftNearAxis"`
	RightLensMeterSph        *string  `json:"rightLensMeterSph"`
	LeftLensMeterSph         *string  `json:"leftLensMeterSph"`
	RightLensMeterAxis       *string  `json:"rightLensMeterAxis"`
	LeftLensMeterAxis        *string  `json:"leftLensMeterAxis"`
	RightLensMeterCyl        *string  `json:"rightLensMeterCyl"`
	LeftLensMeterCyl         *string  `json:"leftLensMeterCyl"`
}

type VitalSignsProgress struct {
	Appointments []*models.Appointment `json:"appointments"`
}

type VitalSignsUpdateInput struct {
	ID                       int      `json:"id"`
	Temperature              *float64 `json:"temperature"`
	Pulse                    *float64 `json:"pulse"`
	BloodPressureSystolic    *float64 `json:"bloodPressureSystolic"`
	BloodPressureDiastolic   *float64 `json:"bloodPressureDiastolic"`
	RespiratoryRate          *float64 `json:"respiratoryRate"`
	OxygenSaturation         *float64 `json:"oxygenSaturation"`
	Height                   *float64 `json:"height"`
	Weight                   *float64 `json:"weight"`
	Bmi                      *float64 `json:"bmi"`
	RightDistanceUncorrected *string  `json:"rightDistanceUncorrected"`
	LeftDistanceUncorrected  *string  `json:"leftDistanceUncorrected"`
	RightDistancePinhole     *string  `json:"rightDistancePinhole"`
	LeftDistancePinhole      *string  `json:"leftDistancePinhole"`
	RightDistanceCorrected   *string  `json:"rightDistanceCorrected"`
	LeftDistanceCorrected    *string  `json:"leftDistanceCorrected"`
	RightNearUncorrected     *string  `json:"rightNearUncorrected"`
	LeftNearUncorrected      *string  `json:"leftNearUncorrected"`
	RightNearPinhole         *string  `json:"rightNearPinhole"`
	LeftNearPinhole          *string  `json:"leftNearPinhole"`
	RightNearCorrected       *string  `json:"rightNearCorrected"`
	LeftNearCorrected        *string  `json:"leftNearCorrected"`
	RightApplanation         *string  `json:"rightApplanation"`
	LeftApplanation          *string  `json:"leftApplanation"`
	RightTonopen             *string  `json:"rightTonopen"`
	LeftTonopen              *string  `json:"leftTonopen"`
	RightDigital             *string  `json:"rightDigital"`
	LeftDigital              *string  `json:"leftDigital"`
	RightNoncontact          *string  `json:"rightNoncontact"`
	LeftNoncontact           *string  `json:"leftNoncontact"`
	RightDistanceSph         *string  `json:"rightDistanceSph"`
	LeftDistanceSph          *string  `json:"leftDistanceSph"`
	RightDistanceAxis        *string  `json:"rightDistanceAxis"`
	LeftDistanceAxis         *string  `json:"leftDistanceAxis"`
	RightDistanceCyl         *string  `json:"rightDistanceCyl"`
	LeftDistanceCyl          *string  `json:"leftDistanceCyl"`
	RightNearSph             *string  `json:"rightNearSph"`
	LeftNearSph              *string  `json:"leftNearSph"`
	RightNearCyl             *string  `json:"rightNearCyl"`
	LeftNearCyl              *string  `json:"leftNearCyl"`
	RightNearAxis            *string  `json:"rightNearAxis"`
	LeftNearAxis             *string  `json:"leftNearAxis"`
	RightLensMeterSph        *string  `json:"rightLensMeterSph"`
	LeftLensMeterSph         *string  `json:"leftLensMeterSph"`
	RightLensMeterAxis       *string  `json:"rightLensMeterAxis"`
	LeftLensMeterAxis        *string  `json:"leftLensMeterAxis"`
	RightLensMeterCyl        *string  `json:"rightLensMeterCyl"`
	LeftLensMeterCyl         *string  `json:"leftLensMeterCyl"`
}

type DateOfBirthInputType string

const (
	DateOfBirthInputTypeDate     DateOfBirthInputType = "DATE"
	DateOfBirthInputTypeAgeYear  DateOfBirthInputType = "AGE_YEAR"
	DateOfBirthInputTypeAgeMonth DateOfBirthInputType = "AGE_MONTH"
)

var AllDateOfBirthInputType = []DateOfBirthInputType{
	DateOfBirthInputTypeDate,
	DateOfBirthInputTypeAgeYear,
	DateOfBirthInputTypeAgeMonth,
}

func (e DateOfBirthInputType) IsValid() bool {
	switch e {
	case DateOfBirthInputTypeDate, DateOfBirthInputTypeAgeYear, DateOfBirthInputTypeAgeMonth:
		return true
	}
	return false
}

func (e DateOfBirthInputType) String() string {
	return string(e)
}

func (e *DateOfBirthInputType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DateOfBirthInputType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DateOfBirthInputType", str)
	}
	return nil
}

func (e DateOfBirthInputType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Destination string

const (
	DestinationPreexam      Destination = "PREEXAM"
	DestinationPreoperation Destination = "PREOPERATION"
	DestinationPhysician    Destination = "PHYSICIAN"
	DestinationReception    Destination = "RECEPTION"
)

var AllDestination = []Destination{
	DestinationPreexam,
	DestinationPreoperation,
	DestinationPhysician,
	DestinationReception,
}

func (e Destination) IsValid() bool {
	switch e {
	case DestinationPreexam, DestinationPreoperation, DestinationPhysician, DestinationReception:
		return true
	}
	return false
}

func (e Destination) String() string {
	return string(e)
}

func (e *Destination) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Destination(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Destination", str)
	}
	return nil
}

func (e Destination) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NotifType string

const (
	NotifTypeChat NotifType = "CHAT"
)

var AllNotifType = []NotifType{
	NotifTypeChat,
}

func (e NotifType) IsValid() bool {
	switch e {
	case NotifTypeChat:
		return true
	}
	return false
}

func (e NotifType) String() string {
	return string(e)
}

func (e *NotifType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotifType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotifType", str)
	}
	return nil
}

func (e NotifType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "asc"
	OrderDirectionDesc OrderDirection = "desc"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Pertinence string

const (
	PertinencePositive Pertinence = "POSITIVE"
	PertinenceNegative Pertinence = "NEGATIVE"
)

var AllPertinence = []Pertinence{
	PertinencePositive,
	PertinenceNegative,
}

func (e Pertinence) IsValid() bool {
	switch e {
	case PertinencePositive, PertinenceNegative:
		return true
	}
	return false
}

func (e Pertinence) String() string {
	return string(e)
}

func (e *Pertinence) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Pertinence(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Pertinence", str)
	}
	return nil
}

func (e Pertinence) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Copyright 2021 Kidus Tiliksew
//
// This file is part of Tensor EMR.
//
// Tensor EMR is free software: you can redistribute it and/or modify
// it under the terms of the version 2 of GNU General Public License as published by
// the Free Software Foundation.
//
// Tensor EMR is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
type SupplyStatus string

const (
	SupplyStatusActive   SupplyStatus = "ACTIVE"
	SupplyStatusInactive SupplyStatus = "INACTIVE"
)

var AllSupplyStatus = []SupplyStatus{
	SupplyStatusActive,
	SupplyStatusInactive,
}

func (e SupplyStatus) IsValid() bool {
	switch e {
	case SupplyStatusActive, SupplyStatusInactive:
		return true
	}
	return false
}

func (e SupplyStatus) String() string {
	return string(e)
}

func (e *SupplyStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SupplyStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SupplyStatus", str)
	}
	return nil
}

func (e SupplyStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
